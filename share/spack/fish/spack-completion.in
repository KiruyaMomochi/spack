# Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
# Spack Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: (Apache-2.0 OR MIT)


# NOTE: spack-completion.fish is auto-generated by:
#
#   $ spack commands --aliases --format=fish
#       --header=fish/spack-completion.in --update=spack-completion.fish
#
# Please do not manually modify this file.

# TODO: complete %compiler in spec

set -g __fish_spack_argparse_cache_line
set -g __fish_spack_argparse_command
set -g __fish_spack_argparse_argv
set -g __fish_spack_argparse_return

function __fish_spack_argparse
    # Figure out if the current invocation already has a command.
    # set -l line (commandline -opc)
    set -l args $argv
    set -l commands

    if test "$__fish_spack_argparse_cache_line" = "$args"
        return $__fish_spack_argparse_return
    end

    set -g | string replace -rf '^(__fish_spack_flag_\w+)(.*?)$' 'set -ge $1' | source

    set -g __fish_spack_argparse_cache_line $argv
    set -g __fish_spack_argparse_return 0

    while set -q args[1]
        set -l cmd_var (string replace -ra -- '[ -]' '_' $commands $args[1] | string join '_')
        set -l optspecs_var __fish_spack_optspecs_$cmd_var
        set -q $optspecs_var; or break

        set -a commands $args[1]
        set -e args[1]
        set -l optspecs $$optspecs_var

        set -q optspecs[1]; or continue
        argparse -i -s $optspecs -- $args 2>/dev/null; or break
        set -l | string replace -rf '^(_flag_.*)$' 'set -g __fish_spack$1' | source
        set args $argv

        set -q _flag_help
        and set -g __fish_spack_argparse_return 1
    end

    set -g __fish_spack_argparse_command $commands
    set -g __fish_spack_argparse_argv $args

    return $__fish_spack_argparse_return
end

function __fish_spack_using_command
    set -l line (commandline -opc)
    __fish_spack_argparse $line; or return 1

    test "$__fish_spack_argparse_command" = "$argv"
end

function __fish_spack_using_command_pos
    set -l line (commandline -opc)

    __fish_spack_argparse $line; or return 1

    test "$__fish_spack_argparse_command" = "$argv[2..-1]"
    or return

    test (count $__fish_spack_argparse_argv) = $argv[1]
end

# Complete functions

function __fish_spack_bootstrap_names
    if set -q __fish_spack_flag_scope
        spack bootstrap list --scope $__fish_spack_flag_scope | string replace -rf '^Name: (\w+).*?$' '$1'
    else
        spack bootstrap list | string replace -rf '^Name: (\w+).*?$' '$1'
    end
end

function __fish_spack_build_env_spec
    set token (commandline -ot)
    # if not set -q token[1]
    #     set token ''
    # end
    set -l index (contains -- -- $__fish_spack_argparse_argv)
    if set -q index[1]
        __fish_complete_subcommand --commandline $__fish_spack_argparse_argv[(math $index + 1)..-1]
    else if set -q __fish_spack_argparse_argv[1]
        __fish_complete_subcommand --commandline "$__fish_spack_argparse_argv[2..-1] $token"
    else
        __fish_spack_specs
    end
end

function __fish_spack_commands
    spack commands
end

function __fish_spack_colon_path
    set token (commandline -ot | string split -rm1 ':')

    if test (count $token) -lt 2
        __fish_complete_path $token[1]
    else
        __fish_complete_path $token[2] | string replace -r '^' "$token[1]:"
    end
end

function __fish_spack_config_sections
    if set -q __fish_spack_flag_scope
        spack config --scope $__fish_spack_flag_scope list | string split ' '
    else
        spack config list | string split ' '
    end
end

function __fish_spack_environments
    string trim (spack env list)
end

function __fish_spack_extensions
    string trim (spack extensions)
end

function __fish_spack_gpg_keys
    spack gpg list
end

function __fish_spack_installed_compilers
    spack compilers | grep -v '^[=-]\|^$'
end

function __fish_spack_installed_specs
    # spack find --no-groups --format "{name}" | uniq
    spack find --no-groups
end

function __fish_spack_git_rev
    type -q __fish_git_ranges
    and __fish_git_ranges
end

function __fish_spack_mirrors
    spack mirror list | awk {'printf ("%s\t%s", $1, $2)'}
end

function __fish_spack_package_versions
    string trim (spack versions $argv)
end

function __fish_spack_packages
    spack list
end

function __fish_spack_pkg_packages
    spack pkg list
end

function __fish_spack_providers
    string trim (spack providers | grep -v '^$')
end

function __fish_spack_repos
    spack repo list | awk {'printf ("%s\t%s", $1, $2)'}
end

function __fish_spack_scopes
    # TODO: how to list all scopes?
    set -l scope system site user defaults
    set -l platform cray darwin linux test

    string join \n $scope
end

function __fish_spack_specs
    spack list
end

function __fish_spack_tags
    string trim (spack tags)
end

function __fish_spack_tests
    spack test list | grep -v '^[=-]'
end

function __fish_spack_unit_tests
    spack unit-test -l
end

function __fish_spack_yamls
    set token (commandline -ot)
    test "$token" = "-f"
    and return

    if test -n "$token"
        find $token* -type f '(' -iname '*.yaml' -or -iname '*.yml' ')'
    else
        find -maxdepth 2 -type f '(' -iname '*.yaml' -or -iname '*.yml' ')' | cut -c 3-
    end
end

complete -c spack --erase
