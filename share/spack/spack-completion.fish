# Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
# Spack Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: (Apache-2.0 OR MIT)

# NOTE: spack-completion.fish is auto-generated by:
#
#   $ spack commands --aliases --format=fish
#       --header=fish/spack-completion.in --update=spack-completion.fish
#
# Please do not manually modify this file.

# Check fish version before proceeding
set -l fish_version (string split '.' $FISH_VERSION)
if test $fish_version[1] -lt 3
    if test $fish_version[1] -eq 3
        and test $fish_version[2] -lt 2
        echo "Fish version is older than 3.2.0. Some completion features may not work"
        set -g __fish_spack_force_files
    else
        echo "This script requires fish version 3.0 or later"
        exit 1
    end
else
    set -g __fish_spack_force_files -F
end

# The following global variables are used as cache of `__fish_spack_argparse`

# Cached command line
set -g __fish_spack_argparse_cache_line
# Parsed command
set -g __fish_spack_argparse_command
# Remaining arguments
set -g __fish_spack_argparse_argv
# Return value
set -g __fish_spack_argparse_return

# Spack command generates a optspec variable $__fish_spack_optspecs_<command>
# We find if command exists, and echo the optspec variable name.
function __fish_spack_get_optspecs -d "Get optspecs of spack command"
    # Convert arguments to replace ' ' and '-' by '_'
    set -l cmd_var (string replace -ra -- '[ -]' '_' $argv | string join '_')
    # Set optspec variable name
    set -l optspecs_var __fish_spack_optspecs_$cmd_var
    # Query if variable $$optspecs_var exists
    set -q $optspecs_var; or return 1
    # If it exists, echo all optspecs line by line
    # String join return 1 if no join performed,
    # so we return 0 in such case
    string join \n $$optspecs_var; or return 0
end

# Parse arguments of command line, save results to global variables,
# and all found flags to __flsh_spack_flag_<flag>.
# Returns 1 if help flag is found.
function __fish_spack_argparse
    # Figure out if the current invocation already has a command.
    set -l args $argv
    set -l commands

    # Return cached result if arguments haven't changed
    if test "$__fish_spack_argparse_cache_line" = "$args"
        return $__fish_spack_argparse_return
    end

    # Clear all found flags in last run
    set -g | string replace -rf -- '^(__fish_spack_flag_\w+)(.*?)$' 'set -ge $1' | source

    # Set default return value to 0, indicating success
    set -g __fish_spack_argparse_return 0
    # Set command line to current arguments
    set -g __fish_spack_argparse_cache_line $argv

    # Recursively check arguments for commands
    while set -q args[1]
        # Get optspecs of current command
        set -l optspecs (__fish_spack_get_optspecs $commands $args[1])
        or break

        # If command exists, shift arguments
        set -a commands $args[1]
        set -e args[1]

        # If command has no arguments, continue
        set -q optspecs[1]; or continue

        # Parse arguments. argparse set variable _flag_<flag> if flag is found
        # we find all these variables and
        # set them to global variable __fish_spack_flag_<flag>
        argparse -i -s $optspecs -- $args 2>/dev/null; or break
        set -l | string replace -rf -- '^(_flag_.*)$' 'set -g __fish_spack$1' | source

        # Set args to not parsed arguments
        set args $argv

        # If command has help flag, we don't need to
        # parse more so short circuit
        if set -q _flag_help
            set -g __fish_spack_argparse_return 1
            break
        end
    end

    # Set cached variables
    set -g __fish_spack_argparse_command $commands
    set -g __fish_spack_argparse_argv $args

    return $__fish_spack_argparse_return
end

# Check if current commandline's command is "spack $argv"
function __fish_spack_using_command
    set -l line (commandline -opc)
    __fish_spack_argparse $line; or return 1

    set -p argv spack
    test "$__fish_spack_argparse_command" = "$argv"
end

# Check if current commandline's command is "spack $argv[2..-1]",
# and cursor is at $argv[1]-th positional argument
function __fish_spack_using_command_pos
    __fish_spack_using_command $argv[2..-1]
    or return

    test (count $__fish_spack_argparse_argv) = $argv[1]
end

# Spack commands
#
# Everything below here is auto-generated.

function __fish_spack_bootstrap_names
    if set -q __fish_spack_flag_scope
        spack bootstrap list --scope $__fish_spack_flag_scope | string replace -rf -- '^Name: (\w+).*?$' '$1'
    else
        spack bootstrap list | string replace -rf -- '^Name: (\w+).*?$' '$1'
    end
end

# Reference: sudo's fish completion
function __fish_spack_build_env_spec
    set token (commandline -opt)

    set -l index (contains -- -- $__fish_spack_argparse_argv)
    if set -q index[1]
        __fish_complete_subcommand --commandline $__fish_spack_argparse_argv[(math $index + 1)..-1]
    else if set -q __fish_spack_argparse_argv[1]
        __fish_complete_subcommand --commandline "$__fish_spack_argparse_argv[2..-1] $token"
    else
        __fish_spack_specs
    end
end

function __fish_spack_commands
    spack commands
end

function __fish_spack_colon_path
    set token (string split -rm1 ':' (commandline -opt))

    if test (count $token) -lt 2
        __fish_complete_path $token[1]
    else
        __fish_complete_path $token[2] | string replace -r -- '^' "$token[1]:"
    end
end

function __fish_spack_config_sections
    if set -q __fish_spack_flag_scope
        spack config --scope $__fish_spack_flag_scope list | string split ' '
    else
        spack config list | string split ' '
    end
end

function __fish_spack_environments
    string trim (spack env list)
end

function __fish_spack_extensions
    string trim (spack extensions)
end

function __fish_spack_gpg_keys
    spack gpg list
end

function __fish_spack_installed_compilers
    spack compilers | grep -v '^[=-]\|^$'
end

function __fish_spack_installed_packages
    spack find --no-groups --format "{name}" | uniq
end

function __fish_spack_installed_specs
    # Try match local hash first
    __fish_spack_installed_specs_id
    and return

    spack find --no-groups --format "{name}@{version}"
end

function __fish_spack_installed_specs_id
    set -l token (commandline -opt)
    string match -q -- '/*' $token
    or return 1

    spack find --format '/{hash:7}'\t'{name}{@version}'
end

function __fish_spack_git_rev
    type -q __fish_git_ranges
    and __fish_git_ranges
end

function __fish_spack_mirrors
    spack mirror list | awk {'printf ("%s\t%s", $1, $2)'}
end

function __fish_spack_package_versions
    string trim (spack versions $argv)
end

function __fish_spack_packages
    spack list
end

function __fish_spack_pkg_packages
    spack pkg list
end

function __fish_spack_providers
    string trim (spack providers | grep -v '^$')
end

function __fish_spack_repos
    spack repo list | awk {'printf ("%s\t%s", $1, $2)'}
end

function __fish_spack_scopes
    # TODO: how to list all scopes?
    set -l scope system site user defaults
    set -l platform cray darwin linux test

    string join \n $scope
end

function __fish_spack_specs
    set -l token (commandline -opt)

    # Complete compilers
    if string match -rq -- '^(?<pre>.*%)[\w-]*(@[\w\.+~-]*)?$' $token
        __fish_spack_installed_compilers | string replace -r -- '^' "$pre"
        return
    end

    # Try to complete spec version
    # Currently we can only match '@' after a package name
    set -l package

    # Match ^ followig package name
    if string match -rq -- '^(?<pre>.*?\^)[\w\.+~-]*$' $token
        # Package name is the nearest, assuming first character is always a letter or dight
        set packages (string match -ar -- '^[\w-]+' $__fish_spack_argparse_argv $token)
        set package $packages[-1]

        if test -n "$package"
            spack dependencies $package | string replace -r -- '^' "$pre"
            return
        end
    end

    # Match @ following package name
    if string match -rq -- '^(?<pre>.*?\^?(?<packages>[\w\.+~-]*)@)[\w\.]*$' $token
        set package $packages[-1]

        # Matched @ starting at next token
        if test -z "$package"
            string match -arq -- '(^|\^)(?<inners>[\w\.+~-]*)$' $__fish_spack_argparse_argv[-1]
            if test -n "$inners[1]"
                set package $inners[-1]
            end
        end
    end

    # Complete version if package found
    if test -n "$package"
        # Only list safe versions for speed
        string trim (spack versions --safe $package) | string replace -r -- '^' "$pre"
        return
    end

    # Else complete package name
    __fish_spack_installed_packages | string replace -r -- '$' \t"installed"
    spack list
end

function __fish_spack_specs_or_id
    # Try match local hash first
    __fish_spack_installed_specs_id
    and return

    __fish_spack_specs
end

function __fish_spack_tags
    string trim (spack tags)
end

function __fish_spack_tests
    spack test list | grep -v '^[=-]'
end

function __fish_spack_unit_tests
    # Skip optional flags, or it will be really slow
    string match -q -- '-*' (commandline -opt)
    and return

    spack unit-test -l
end

function __fish_spack_yamls
    # Trim flag from current token
    string match -rq -- '(?<pre>-.)?(?<token>.*)' (commandline -opt)

    if test -n "$token"
        find $token* -type f '(' -iname '*.yaml' -or -iname '*.yml' ')'
    else
        find -maxdepth 2 -type f '(' -iname '*.yaml' -or -iname '*.yml' ')' | cut -c 3-
    end
end

complete -c spack --erase

# spack
set -g __fish_spack_optspecs_spack "h/help" "H/all-help" "color=" "c/config=" "C/config-scope=" "d/debug" "show-cores=" "timestamp" "pdb" "e/env=" "D/env-dir=" "E/no-env" "use-env-repo" "k/insecure" "l/enable-locks" "L/disable-locks" "m/mock" "b/bootstrap" "p/profile" "sorted-profile=" "lines=" "v/verbose" "stacktrace" "V/version" "print-shell-vars="
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a activate -d "activate a package extension"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a add -d "add a spec to an environment"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a analyze -d "run analyzers on installed packages"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a arch -d "print architecture information about this machine"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a audit -d "audit configuration files, packages, etc."
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a blame -d "show contributors to packages"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a bootstrap -d "manage bootstrap configuration"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a build-env -d "run a command in a spec's install environment, or dump its environment to screen or file"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a buildcache -d "create, download and install binary packages"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a cd -d "cd to spack directories in the shell"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a checksum -d "checksum available versions of a package"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a ci -d "manage continuous integration pipelines"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a clean -d "remove temporary build files and/or downloaded archives"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a clone -d "create a new installation of spack in another prefix"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a commands -d "list available spack commands"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a compiler -d "manage compilers"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a compilers -d "list available compilers"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a concretize -d "concretize an environment and write a lockfile"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a config -d "get and set configuration options"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a containerize -d "creates recipes to build images for different container runtimes"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a create -d "create a new package file"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a deactivate -d "deactivate a package extension"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a debug -d "debugging commands for troubleshooting Spack"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a dependencies -d "show dependencies of a package"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a dependents -d "show packages that depend on another"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a deprecate -d "Replace one package with another via symlinks"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a dev-build -d "developer build: build from code in current working directory"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a develop -d "add a spec to an environment's dev-build information"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a diff -d "compare two specs"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a docs -d "open spack documentation in a web browser"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a edit -d "open package files in $EDITOR"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a env -d "manage virtual environments"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a extensions -d "list extensions for package"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a external -d "manage external packages in Spack configuration"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a fetch -d "fetch archives for packages"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a find -d "list and search installed packages"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a gc -d "remove specs that are now no longer needed"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a gpg -d "handle GPG actions for spack"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a graph -d "generate graphs of package dependency relationships"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a help -d "get help on spack and its commands"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a info -d "get detailed information on a particular package"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a install -d "build and install packages"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a license -d "list and check license headers on files in spack"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a list -d "list and search available packages"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a load -d "add package to the user environment"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a location -d "print out locations of packages and spack directories"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a log-parse -d "filter errors and warnings from build logs"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a maintainers -d "get information about package maintainers"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a make-installer -d "generate Windows installer"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a mark -d "mark packages as explicitly or implicitly installed"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a mirror -d "manage mirrors (source and binary)"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a module -d "generate/manage module files"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a monitor -d "interact with a monitor server"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a patch -d "patch expanded archive sources in preparation for install"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a pkg -d "query packages associated with particular git revisions"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a providers -d "list packages that provide a particular virtual package"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a pydoc -d "run pydoc from within spack"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a python -d "launch an interpreter as spack would launch a command"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a reindex -d "rebuild Spack's package database"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a remove -d "remove specs from an environment"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a rm -d "remove specs from an environment"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a repo -d "manage package source repositories"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a resource -d "list downloadable resources (tarballs, repos, patches, etc.)"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a restage -d "revert checked out package source code"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a solve -d "concretize a specs using an ASP solver"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a spec -d "show what would be installed, given a spec"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a stage -d "expand downloaded archive in preparation for install"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a style -d "runs source code style checks on spack"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a tags -d "Show package tags and associated packages"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a test -d "run spack's tests for an install"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a test-env -d "run a command in a spec's test environment, or dump its environment to screen or file"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a tutorial -d "set up spack for our tutorial (WARNING: modifies config!)"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a undevelop -d "remove specs from an environment"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a uninstall -d "remove installed packages"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a unit-test -d "run spack's unit tests (wrapper around pytest)"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a unload -d "remove package from the user environment"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a url -d "debugging tool for url parsing"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a verify -d "Check that all spack packages are on disk as installed"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a versions -d "list available versions of a package"
complete -c spack -n "__fish_spack_using_command_pos 0 " -f -a view -d "project packages to a compact naming scheme on the filesystem."
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command " -s h -l help -d "show this help message and exit"
# ['-H', '--all-help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command " -s H -l all-help -d "show help for all commands (same as spack help --all)"
# ['--color'] -> ['always', 'never', 'auto']: None
complete -c spack -n "__fish_spack_using_command " -l color -r -f -a "always never auto"
complete -c spack -n "__fish_spack_using_command " -l color -r -d "when to colorize output (default: auto)"
# ['-c', '--config'] -> 'config_vars': None
complete -c spack -n "__fish_spack_using_command " -s c -l config -r -d "add one or more custom, one off config settings."
# ['-C', '--config-scope'] -> 'config_scopes': None
complete -c spack -n "__fish_spack_using_command " -s C -l config-scope -r -f -a "(__fish_complete_directories)"
complete -c spack -n "__fish_spack_using_command " -s C -l config-scope -r -d "add a custom configuration scope"
# ['-d', '--debug'] -> 'debug': 0
complete -c spack -n "__fish_spack_using_command " -s d -l debug -d "write out debug messages (more d's for more verbosity: -d, -dd, -ddd, etc.)"
# ['--show-cores'] -> ['off', 'full', 'minimized']: None
complete -c spack -n "__fish_spack_using_command " -l show-cores -r -f -a "off full minimized"
complete -c spack -n "__fish_spack_using_command " -l show-cores -r -d "provide additional information on concretization failures off (default): show only the violated rule full: show raw unsat cores from clingo minimized: show subset-minimal unsat cores (Warning: this may take hours for some specs)"
# ['--timestamp'] -> 'timestamp': 0
complete -c spack -n "__fish_spack_using_command " -l timestamp -d "Add a timestamp to tty output"
# ['--pdb'] -> 'pdb': 0
complete -c spack -n "__fish_spack_using_command " -l pdb -d "run spack under the pdb debugger"
# ['-e', '--env'] -> 'env': None
complete -c spack -n "__fish_spack_using_command " -s e -l env -r -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command " -s e -l env -r -d "run with a specific environment (see spack env)"
# ['-D', '--env-dir'] -> 'env_dir': None
complete -c spack -n "__fish_spack_using_command " -s D -l env-dir -r -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command " -s D -l env-dir -r -d "run with an environment directory (ignore named environments)"
# ['-E', '--no-env'] -> 'no_env': 0
complete -c spack -n "__fish_spack_using_command " -s E -l no-env -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command " -s E -l no-env -d "run without any environments activated (see spack env)"
# ['--use-env-repo'] -> 'use_env_repo': 0
complete -c spack -n "__fish_spack_using_command " -l use-env-repo -d "when running in an environment, use its package repository"
# ['-k', '--insecure'] -> 'insecure': 0
complete -c spack -n "__fish_spack_using_command " -s k -l insecure -d "do not check ssl certificates when downloading"
# ['-l', '--enable-locks'] -> 'locks': 0
complete -c spack -n "__fish_spack_using_command " -s l -l enable-locks -d "use filesystem locking (default)"
# ['-L', '--disable-locks'] -> 'locks': 0
complete -c spack -n "__fish_spack_using_command " -s L -l disable-locks -d "do not use filesystem locking (unsafe)"
# ['-m', '--mock'] -> 'mock': 0
complete -c spack -n "__fish_spack_using_command " -s m -l mock -d "use mock packages instead of real ones"
# ['-b', '--bootstrap'] -> 'bootstrap': 0
complete -c spack -n "__fish_spack_using_command " -s b -l bootstrap -d "use bootstrap configuration (bootstrap store, config, externals)"
# ['-p', '--profile'] -> 'spack_profile': 0
complete -c spack -n "__fish_spack_using_command " -s p -l profile -d "profile execution using cProfile"
# ['--sorted-profile'] -> 'sorted_profile': None
complete -c spack -n "__fish_spack_using_command " -l sorted-profile -r -f -a "calls ncalls cumtime cumulative filename line module"
complete -c spack -n "__fish_spack_using_command " -l sorted-profile -r -d "profile and sort by one or more of: [calls, ncalls, cumtime, cumulative, filename, line, module]"
# ['--lines'] -> 'lines': None
complete -c spack -n "__fish_spack_using_command " -l lines -r -d "lines of profile output or 'all' (default: 20)"
# ['-v', '--verbose'] -> 'verbose': 0
complete -c spack -n "__fish_spack_using_command " -s v -l verbose -d "print additional output during builds"
# ['--stacktrace'] -> 'stacktrace': 0
complete -c spack -n "__fish_spack_using_command " -l stacktrace -d "add stacktraces to all printed statements"
# ['-V', '--version'] -> 'version': 0
complete -c spack -n "__fish_spack_using_command " -s V -l version -d "show version number and exit"
# ['--print-shell-vars'] -> 'print_shell_vars': None
complete -c spack -n "__fish_spack_using_command " -l print-shell-vars -r -d "print info needed by setup-env.[c]sh"

# spack activate
set -g __fish_spack_optspecs_spack_activate "h/help" "f/force" "v/view="
# 0 -> installed_spec None (installed package spec): '...'
complete -c spack -n "__fish_spack_using_command activate" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command activate" -s h -l help -d "show this help message and exit"
# ['-f', '--force'] -> 'force': 0
complete -c spack -n "__fish_spack_using_command activate" -s f -l force -d "activate without first activating dependencies"
# ['-v', '--view'] -> 'view': None
complete -c spack -n "__fish_spack_using_command activate" -s v -l view -r -f -a "(__fish_complete_directories)"
complete -c spack -n "__fish_spack_using_command activate" -s v -l view -r -d "the view to operate on"

# spack add
set -g __fish_spack_optspecs_spack_add "h/help" "l/list-name="
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command add" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command add" -s h -l help -d "show this help message and exit"
# ['-l', '--list-name'] -> 'list_name': None
complete -c spack -n "__fish_spack_using_command add" -s l -l list-name -r -d "name of the list to add specs to"

# spack analyze
set -g __fish_spack_optspecs_spack_analyze "h/help" "monitor" "monitor-save-local" "monitor-tags=" "monitor-keep-going" "monitor-host=" "monitor-prefix="
complete -c spack -n "__fish_spack_using_command_pos 0 analyze" -f -a list-analyzers -d "show list of analyzers that are available to run."
complete -c spack -n "__fish_spack_using_command_pos 0 analyze" -f -a run -d "provide the name of the analyzer to run."
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command analyze" -s h -l help -d "show this help message and exit"
# ['--monitor'] -> 'use_monitor': 0
complete -c spack -n "__fish_spack_using_command analyze" -l monitor -d "interact with a monitor server during builds."
# ['--monitor-save-local'] -> 'monitor_save_local': 0
complete -c spack -n "__fish_spack_using_command analyze" -l monitor-save-local -d "save monitor results to .spack instead of server."
# ['--monitor-tags'] -> 'monitor_tags': None
complete -c spack -n "__fish_spack_using_command analyze" -l monitor-tags -r -d "One or more (comma separated) tags for a build."
# ['--monitor-keep-going'] -> 'monitor_keep_going': 0
complete -c spack -n "__fish_spack_using_command analyze" -l monitor-keep-going -d "continue the build if a request to monitor fails."
# ['--monitor-host'] -> 'monitor_host': None
complete -c spack -n "__fish_spack_using_command analyze" -l monitor-host -r -d "If using a monitor, customize the host."
# ['--monitor-prefix'] -> 'monitor_prefix': None
complete -c spack -n "__fish_spack_using_command analyze" -l monitor-prefix -r -d "The API prefix for the monitor service."

# spack analyze list-analyzers
set -g __fish_spack_optspecs_spack_analyze_list_analyzers "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command analyze list-analyzers" -s h -l help -d "show this help message and exit"

# spack analyze run
set -g __fish_spack_optspecs_spack_analyze_run "h/help" "overwrite" "p/path=" "a/analyzers="
# 0 -> spec None (package spec): '...'
complete -c spack -n "__fish_spack_using_command analyze run" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command analyze run" -s h -l help -d "show this help message and exit"
# ['--overwrite'] -> 'overwrite': 0
complete -c spack -n "__fish_spack_using_command analyze run" -l overwrite -d "re-analyze even if the output file already exists."
# ['-p', '--path'] -> 'path': None
complete -c spack -n "__fish_spack_using_command analyze run" -s p -l path -r -d "write output to a different directory than ~/.spack/analyzers"
# ['-a', '--analyzers'] -> 'analyzers': None
complete -c spack -n "__fish_spack_using_command analyze run" -s a -l analyzers -r -d "add an analyzer (defaults to all available)"

# spack arch
set -g __fish_spack_optspecs_spack_arch "h/help" "g/generic-target" "known-targets" "p/platform" "o/operating-system" "t/target" "f/frontend" "b/backend"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command arch" -s h -l help -d "show this help message and exit"
# ['-g', '--generic-target'] -> 'generic_target': 0
complete -c spack -n "__fish_spack_using_command arch" -s g -l generic-target -d "show the best generic target"
# ['--known-targets'] -> 'known_targets': 0
complete -c spack -n "__fish_spack_using_command arch" -l known-targets -d "show a list of all known targets and exit"
# ['-p', '--platform'] -> 'platform': 0
complete -c spack -n "__fish_spack_using_command arch" -s p -l platform -d "print only the platform"
# ['-o', '--operating-system'] -> 'operating_system': 0
complete -c spack -n "__fish_spack_using_command arch" -s o -l operating-system -d "print only the operating system"
# ['-t', '--target'] -> 'target': 0
complete -c spack -n "__fish_spack_using_command arch" -s t -l target -d "print only the target"
# ['-f', '--frontend'] -> 'frontend': 0
complete -c spack -n "__fish_spack_using_command arch" -s f -l frontend -d "print frontend"
# ['-b', '--backend'] -> 'backend': 0
complete -c spack -n "__fish_spack_using_command arch" -s b -l backend -d "print backend"

# spack audit
set -g __fish_spack_optspecs_spack_audit "h/help"
complete -c spack -n "__fish_spack_using_command_pos 0 audit" -f -a configs -d "audit configuration files"
complete -c spack -n "__fish_spack_using_command_pos 0 audit" -f -a packages-https -d "check https in packages"
complete -c spack -n "__fish_spack_using_command_pos 0 audit" -f -a packages -d "audit package recipes"
complete -c spack -n "__fish_spack_using_command_pos 0 audit" -f -a list -d "list available checks and exits"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command audit" -s h -l help -d "show this help message and exit"

# spack audit configs
set -g __fish_spack_optspecs_spack_audit_configs "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command audit configs" -s h -l help -d "show this help message and exit"

# spack audit packages-https
set -g __fish_spack_optspecs_spack_audit_packages_https "h/help" "all"
# 0 -> PKG None (package to be analyzed (if none all packages will be processed)): '*'
complete -c spack -n "__fish_spack_using_command_pos 0 audit packages-https" -f -a "(__fish_spack_packages)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command audit packages-https" -s h -l help -d "show this help message and exit"
# ['--all'] -> 'check_all': 0
complete -c spack -n "__fish_spack_using_command audit packages-https" -l all -d "audit all packages"

# spack audit packages
set -g __fish_spack_optspecs_spack_audit_packages "h/help"
# 0 -> PKG None (package to be analyzed (if none all packages will be processed)): '*'
complete -c spack -n "__fish_spack_using_command_pos 0 audit packages" -f -a "(__fish_spack_packages)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command audit packages" -s h -l help -d "show this help message and exit"

# spack audit list
set -g __fish_spack_optspecs_spack_audit_list "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command audit list" -s h -l help -d "show this help message and exit"

# spack blame
set -g __fish_spack_optspecs_spack_blame "h/help" "t/time" "p/percent" "g/git" "json"
# 0 -> package_or_file None (name of package to show contributions for, or path to a file in the spack repo): None
complete -c spack -n "__fish_spack_using_command_pos 0 blame" $__fish_spack_force_files -a "(__fish_spack_packages)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command blame" -s h -l help -d "show this help message and exit"
# ['-t', '--time'] -> 'view': 0
complete -c spack -n "__fish_spack_using_command blame" -s t -l time -d "sort by last modification date (default)"
# ['-p', '--percent'] -> 'view': 0
complete -c spack -n "__fish_spack_using_command blame" -s p -l percent -d "sort by percent of code"
# ['-g', '--git'] -> 'view': 0
complete -c spack -n "__fish_spack_using_command blame" -s g -l git -d "show git blame output instead of summary"
# ['--json'] -> 'json': 0
complete -c spack -n "__fish_spack_using_command blame" -l json -d "output blame as machine-readable json records"

# spack bootstrap
set -g __fish_spack_optspecs_spack_bootstrap "h/help"
complete -c spack -n "__fish_spack_using_command_pos 0 bootstrap" -f -a status -d "get the status of Spack"
complete -c spack -n "__fish_spack_using_command_pos 0 bootstrap" -f -a enable -d "enable bootstrapping"
complete -c spack -n "__fish_spack_using_command_pos 0 bootstrap" -f -a disable -d "disable bootstrapping"
complete -c spack -n "__fish_spack_using_command_pos 0 bootstrap" -f -a reset -d "reset bootstrapping configuration to Spack defaults"
complete -c spack -n "__fish_spack_using_command_pos 0 bootstrap" -f -a root -d "get/set the root bootstrap directory"
complete -c spack -n "__fish_spack_using_command_pos 0 bootstrap" -f -a list -d "list the methods available for bootstrapping"
complete -c spack -n "__fish_spack_using_command_pos 0 bootstrap" -f -a trust -d "trust a bootstrapping method"
complete -c spack -n "__fish_spack_using_command_pos 0 bootstrap" -f -a untrust -d "untrust a bootstrapping method"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command bootstrap" -s h -l help -d "show this help message and exit"

# spack bootstrap status
set -g __fish_spack_optspecs_spack_bootstrap_status "h/help" "optional" "dev"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command bootstrap status" -s h -l help -d "show this help message and exit"
# ['--optional'] -> 'optional': 0
complete -c spack -n "__fish_spack_using_command bootstrap status" -l optional -d "show the status of rarely used optional dependencies"
# ['--dev'] -> 'dev': 0
complete -c spack -n "__fish_spack_using_command bootstrap status" -l dev -d "show the status of dependencies needed to develop Spack"

# spack bootstrap enable
set -g __fish_spack_optspecs_spack_bootstrap_enable "h/help" "scope="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command bootstrap enable" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command bootstrap enable" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command bootstrap enable" -l scope -r -d "configuration scope to read/modify"

# spack bootstrap disable
set -g __fish_spack_optspecs_spack_bootstrap_disable "h/help" "scope="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command bootstrap disable" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command bootstrap disable" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command bootstrap disable" -l scope -r -d "configuration scope to read/modify"

# spack bootstrap reset
set -g __fish_spack_optspecs_spack_bootstrap_reset "h/help" "y/yes-to-all"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command bootstrap reset" -s h -l help -d "show this help message and exit"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command bootstrap reset" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"

# spack bootstrap root
set -g __fish_spack_optspecs_spack_bootstrap_root "h/help" "scope="
# 0 -> path None (set the bootstrap directory to this value): '?'
complete -c spack -n "__fish_spack_using_command_pos 0 bootstrap root" -f -a "(__fish_complete_directories)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command bootstrap root" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command bootstrap root" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command bootstrap root" -l scope -r -d "configuration scope to read/modify"

# spack bootstrap list
set -g __fish_spack_optspecs_spack_bootstrap_list "h/help" "scope="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command bootstrap list" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command bootstrap list" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command bootstrap list" -l scope -r -d "configuration scope to read/modify"

# spack bootstrap trust
set -g __fish_spack_optspecs_spack_bootstrap_trust "h/help" "scope="
# 0 -> name None (name of the method to be trusted): None
complete -c spack -n "__fish_spack_using_command_pos 0 bootstrap trust" -f -a "(__fish_spack_bootstrap_names)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command bootstrap trust" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command bootstrap trust" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command bootstrap trust" -l scope -r -d "configuration scope to read/modify"

# spack bootstrap untrust
set -g __fish_spack_optspecs_spack_bootstrap_untrust "h/help" "scope="
# 0 -> name None (name of the method to be untrusted): None
complete -c spack -n "__fish_spack_using_command_pos 0 bootstrap untrust" -f -a "(__fish_spack_bootstrap_names)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command bootstrap untrust" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command bootstrap untrust" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command bootstrap untrust" -l scope -r -d "configuration scope to read/modify"

# spack build-env
set -g __fish_spack_optspecs_spack_build_env "h/help" "clean" "dirty" "dump=" "pickle="
# 0 -> spec [--] [cmd]... None (specs of package environment to emulate): '...'
complete -c spack -n "__fish_spack_using_command build-env" -f -a "(__fish_spack_build_env_spec)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command build-env" -s h -l help -d "show this help message and exit"
# ['--clean'] -> 'dirty': 0
complete -c spack -n "__fish_spack_using_command build-env" -l clean -d "unset harmful variables in the build environment (default)"
# ['--dirty'] -> 'dirty': 0
complete -c spack -n "__fish_spack_using_command build-env" -l dirty -d "preserve user environment in spack's build environment (danger!)"
# ['--dump'] -> 'dump': None
complete -c spack -n "__fish_spack_using_command build-env" -l dump -r -d "dump a source-able environment to FILE"
# ['--pickle'] -> 'pickle': None
complete -c spack -n "__fish_spack_using_command build-env" -l pickle -r -d "dump a pickled source-able environment to FILE"

# spack buildcache
set -g __fish_spack_optspecs_spack_buildcache "h/help"
complete -c spack -n "__fish_spack_using_command_pos 0 buildcache" -f -a create -d "create a binary package and push it to a mirror"
complete -c spack -n "__fish_spack_using_command_pos 0 buildcache" -f -a install -d "install from a binary package"
complete -c spack -n "__fish_spack_using_command_pos 0 buildcache" -f -a list -d "list binary packages available from mirrors"
complete -c spack -n "__fish_spack_using_command_pos 0 buildcache" -f -a keys -d "get public keys available on mirrors"
complete -c spack -n "__fish_spack_using_command_pos 0 buildcache" -f -a preview -d "analyze an installed spec and reports whether executables"
complete -c spack -n "__fish_spack_using_command_pos 0 buildcache" -f -a check -d "Check specs (either a single spec from --spec, or else the full set"
complete -c spack -n "__fish_spack_using_command_pos 0 buildcache" -f -a download -d "Download buildcache entry from a remote mirror to local folder.  This"
complete -c spack -n "__fish_spack_using_command_pos 0 buildcache" -f -a get-buildcache-name -d "Get name (prefix) of buildcache entries for this spec"
complete -c spack -n "__fish_spack_using_command_pos 0 buildcache" -f -a save-specfile -d "Get full spec for dependencies, relative to root spec, and write them"
complete -c spack -n "__fish_spack_using_command_pos 0 buildcache" -f -a copy -d "Copy a buildcache entry and all its files from one mirror, given as"
complete -c spack -n "__fish_spack_using_command_pos 0 buildcache" -f -a sync -d " Syncs binaries (and associated metadata) from one mirror to another."
complete -c spack -n "__fish_spack_using_command_pos 0 buildcache" -f -a update-index -d "Update a buildcache index."
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command buildcache" -s h -l help -d "show this help message and exit"

# spack buildcache create
set -g __fish_spack_optspecs_spack_buildcache_create "h/help" "r/rel" "f/force" "u/unsigned" "a/allow-root" "k/key=" "d/directory=" "m/mirror-name=" "mirror-url=" "rebuild-index" "spec-file=" "only="
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command buildcache create" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command buildcache create" -s h -l help -d "show this help message and exit"
# ['-r', '--rel'] -> 'rel': 0
complete -c spack -n "__fish_spack_using_command buildcache create" -s r -l rel -d "make all rpaths relative before creating tarballs."
# ['-f', '--force'] -> 'force': 0
complete -c spack -n "__fish_spack_using_command buildcache create" -s f -l force -d "overwrite tarball if it exists."
# ['-u', '--unsigned'] -> 'unsigned': 0
complete -c spack -n "__fish_spack_using_command buildcache create" -s u -l unsigned -d "create unsigned buildcache tarballs for testing"
# ['-a', '--allow-root'] -> 'allow_root': 0
complete -c spack -n "__fish_spack_using_command buildcache create" -s a -l allow-root -d "allow install root string in binary files after RPATH substitution"
# ['-k', '--key'] -> 'key': None
complete -c spack -n "__fish_spack_using_command buildcache create" -s k -l key -r -f -a "(__fish_spack_gpg_keys)"
complete -c spack -n "__fish_spack_using_command buildcache create" -s k -l key -r -d "Key for signing."
# ['-d', '--directory'] -> 'directory': None
complete -c spack -n "__fish_spack_using_command buildcache create" -s d -l directory -r -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command buildcache create" -s d -l directory -r -d "local directory where buildcaches will be written."
# ['-m', '--mirror-name'] -> 'mirror_name': None
complete -c spack -n "__fish_spack_using_command buildcache create" -s m -l mirror-name -r -f -a "(__fish_spack_mirrors)"
complete -c spack -n "__fish_spack_using_command buildcache create" -s m -l mirror-name -r -d "name of the mirror where buildcaches will be written."
# ['--mirror-url'] -> 'mirror_url': None
complete -c spack -n "__fish_spack_using_command buildcache create" -l mirror-url -r -d "URL of the mirror where buildcaches will be written."
# ['--rebuild-index'] -> 'rebuild_index': 0
complete -c spack -n "__fish_spack_using_command buildcache create" -l rebuild-index -d "Regenerate buildcache index after building package(s)"
# ['--spec-file'] -> 'spec_file': None
complete -c spack -n "__fish_spack_using_command buildcache create" -l spec-file -r -d "Create buildcache entry for spec from json or yaml file"
# ['--only'] -> ['package', 'dependencies']: None
complete -c spack -n "__fish_spack_using_command buildcache create" -l only -r -f -a "package dependencies"
complete -c spack -n "__fish_spack_using_command buildcache create" -l only -r -d "Select the buildcache mode. the default is to build a cache for the package along with all its dependencies. Alternatively, one can decide to build a cache for only the package or only the dependencies"

# spack buildcache install
set -g __fish_spack_optspecs_spack_buildcache_install "h/help" "f/force" "m/multiple" "a/allow-root" "u/unsigned" "o/otherarch"
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command buildcache install" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command buildcache install" -s h -l help -d "show this help message and exit"
# ['-f', '--force'] -> 'force': 0
complete -c spack -n "__fish_spack_using_command buildcache install" -s f -l force -d "overwrite install directory if it exists."
# ['-m', '--multiple'] -> 'multiple': 0
complete -c spack -n "__fish_spack_using_command buildcache install" -s m -l multiple -d "allow all matching packages "
# ['-a', '--allow-root'] -> 'allow_root': 0
complete -c spack -n "__fish_spack_using_command buildcache install" -s a -l allow-root -d "allow install root string in binary files after RPATH substitution"
# ['-u', '--unsigned'] -> 'unsigned': 0
complete -c spack -n "__fish_spack_using_command buildcache install" -s u -l unsigned -d "install unsigned buildcache tarballs for testing"
# ['-o', '--otherarch'] -> 'otherarch': 0
complete -c spack -n "__fish_spack_using_command buildcache install" -s o -l otherarch -d "install specs from other architectures instead of default platform and OS"

# spack buildcache list
set -g __fish_spack_optspecs_spack_buildcache_list "h/help" "l/long" "L/very-long" "v/variants" "a/allarch"
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command buildcache list" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command buildcache list" -s h -l help -d "show this help message and exit"
# ['-l', '--long'] -> 'long': 0
complete -c spack -n "__fish_spack_using_command buildcache list" -s l -l long -d "show dependency hashes as well as versions"
# ['-L', '--very-long'] -> 'very_long': 0
complete -c spack -n "__fish_spack_using_command buildcache list" -s L -l very-long -d "show full dependency hashes as well as versions"
# ['-v', '--variants'] -> 'variants': 0
complete -c spack -n "__fish_spack_using_command buildcache list" -s v -l variants -d "show variants in output (can be long)"
# ['-a', '--allarch'] -> 'allarch': 0
complete -c spack -n "__fish_spack_using_command buildcache list" -s a -l allarch -d "list specs for all available architectures instead of default platform and OS"

# spack buildcache keys
set -g __fish_spack_optspecs_spack_buildcache_keys "h/help" "i/install" "t/trust" "f/force"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command buildcache keys" -s h -l help -d "show this help message and exit"
# ['-i', '--install'] -> 'install': 0
complete -c spack -n "__fish_spack_using_command buildcache keys" -s i -l install -d "install Keys pulled from mirror"
# ['-t', '--trust'] -> 'trust': 0
complete -c spack -n "__fish_spack_using_command buildcache keys" -s t -l trust -d "trust all downloaded keys"
# ['-f', '--force'] -> 'force': 0
complete -c spack -n "__fish_spack_using_command buildcache keys" -s f -l force -d "force new download of keys"

# spack buildcache preview
set -g __fish_spack_optspecs_spack_buildcache_preview "h/help"
# 0 -> installed_specs None (one or more installed package specs): '...'
complete -c spack -n "__fish_spack_using_command buildcache preview" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command buildcache preview" -s h -l help -d "show this help message and exit"

# spack buildcache check
set -g __fish_spack_optspecs_spack_buildcache_check "h/help" "m/mirror-url=" "o/output-file=" "scope=" "s/spec=" "spec-file=" "rebuild-on-error"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command buildcache check" -s h -l help -d "show this help message and exit"
# ['-m', '--mirror-url'] -> 'mirror_url': None
complete -c spack -n "__fish_spack_using_command buildcache check" -s m -l mirror-url -r -d "Override any configured mirrors with this mirror url"
# ['-o', '--output-file'] -> 'output_file': None
complete -c spack -n "__fish_spack_using_command buildcache check" -s o -l output-file -r -d "File where rebuild info should be written"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command buildcache check" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command buildcache check" -l scope -r -d "configuration scope containing mirrors to check"
# ['-s', '--spec'] -> 'spec': None
complete -c spack -n "__fish_spack_using_command buildcache check" -s s -l spec -r -f -k -a "(__fish_spack_specs)"
complete -c spack -n "__fish_spack_using_command buildcache check" -s s -l spec -r -d "Check single spec instead of release specs file"
# ['--spec-file'] -> 'spec_file': None
complete -c spack -n "__fish_spack_using_command buildcache check" -l spec-file -r -d "Check single spec from json or yaml file instead of release specs file"
# ['--rebuild-on-error'] -> 'rebuild_on_error': 0
complete -c spack -n "__fish_spack_using_command buildcache check" -l rebuild-on-error -d "Default to rebuilding packages if errors are encountered during the process of checking whether rebuilding is needed"

# spack buildcache download
set -g __fish_spack_optspecs_spack_buildcache_download "h/help" "s/spec=" "spec-file=" "p/path=" "c/require-cdashid"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command buildcache download" -s h -l help -d "show this help message and exit"
# ['-s', '--spec'] -> 'spec': None
complete -c spack -n "__fish_spack_using_command buildcache download" -s s -l spec -r -f -k -a "(__fish_spack_specs)"
complete -c spack -n "__fish_spack_using_command buildcache download" -s s -l spec -r -d "Download built tarball for spec from mirror"
# ['--spec-file'] -> 'spec_file': None
complete -c spack -n "__fish_spack_using_command buildcache download" -l spec-file -r -d "Download built tarball for spec (from json or yaml file) from mirror"
# ['-p', '--path'] -> 'path': None
complete -c spack -n "__fish_spack_using_command buildcache download" -s p -l path -r -d "Path to directory where tarball should be downloaded"
# ['-c', '--require-cdashid'] -> 'require_cdashid': 0
complete -c spack -n "__fish_spack_using_command buildcache download" -s c -l require-cdashid -d "Require .cdashid file to be downloaded with buildcache entry"

# spack buildcache get-buildcache-name
set -g __fish_spack_optspecs_spack_buildcache_get_buildcache_name "h/help" "s/spec=" "spec-file="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command buildcache get-buildcache-name" -s h -l help -d "show this help message and exit"
# ['-s', '--spec'] -> 'spec': None
complete -c spack -n "__fish_spack_using_command buildcache get-buildcache-name" -s s -l spec -r -f -k -a "(__fish_spack_specs)"
complete -c spack -n "__fish_spack_using_command buildcache get-buildcache-name" -s s -l spec -r -d "Spec string for which buildcache name is desired"
# ['--spec-file'] -> 'spec_file': None
complete -c spack -n "__fish_spack_using_command buildcache get-buildcache-name" -l spec-file -r -d "Path to spec json or yaml file for which buildcache name is desired"

# spack buildcache save-specfile
set -g __fish_spack_optspecs_spack_buildcache_save_specfile "h/help" "root-spec=" "root-specfile=" "s/specs=" "specfile-dir="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command buildcache save-specfile" -s h -l help -d "show this help message and exit"
# ['--root-spec'] -> 'root_spec': None
complete -c spack -n "__fish_spack_using_command buildcache save-specfile" -l root-spec -r -d "Root spec of dependent spec"
# ['--root-specfile'] -> 'root_specfile': None
complete -c spack -n "__fish_spack_using_command buildcache save-specfile" -l root-specfile -r -d "Path to json or yaml file containing root spec of dependent spec"
# ['-s', '--specs'] -> 'specs': None
complete -c spack -n "__fish_spack_using_command buildcache save-specfile" -s s -l specs -r -f -k -a "(__fish_spack_specs)"
complete -c spack -n "__fish_spack_using_command buildcache save-specfile" -s s -l specs -r -d "List of dependent specs for which saved yaml is desired"
# ['--specfile-dir'] -> 'specfile_dir': None
complete -c spack -n "__fish_spack_using_command buildcache save-specfile" -l specfile-dir -r -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command buildcache save-specfile" -l specfile-dir -r -d "Path to directory where spec yamls should be saved"

# spack buildcache copy
set -g __fish_spack_optspecs_spack_buildcache_copy "h/help" "base-dir=" "spec-file=" "destination-url="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command buildcache copy" -s h -l help -d "show this help message and exit"
# ['--base-dir'] -> 'base_dir': None
complete -c spack -n "__fish_spack_using_command buildcache copy" -l base-dir -r -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command buildcache copy" -l base-dir -r -d "Path to mirror directory (root of existing buildcache)"
# ['--spec-file'] -> 'spec_file': None
complete -c spack -n "__fish_spack_using_command buildcache copy" -l spec-file -r -d "Path to spec json or yaml file representing buildcache entry to copy"
# ['--destination-url'] -> 'destination_url': None
complete -c spack -n "__fish_spack_using_command buildcache copy" -l destination-url -r -d "Destination mirror url"

# spack buildcache sync
set -g __fish_spack_optspecs_spack_buildcache_sync "h/help" "src-directory=" "src-mirror-name=" "src-mirror-url=" "dest-directory=" "dest-mirror-name=" "dest-mirror-url="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command buildcache sync" -s h -l help -d "show this help message and exit"
# ['--src-directory'] -> 'src_directory': None
complete -c spack -n "__fish_spack_using_command buildcache sync" -l src-directory -r -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command buildcache sync" -l src-directory -r -d "Source mirror as a local file path"
# ['--src-mirror-name'] -> 'src_mirror_name': None
complete -c spack -n "__fish_spack_using_command buildcache sync" -l src-mirror-name -r -f -a "(__fish_spack_mirrors)"
complete -c spack -n "__fish_spack_using_command buildcache sync" -l src-mirror-name -r -d "Name of the source mirror"
# ['--src-mirror-url'] -> 'src_mirror_url': None
complete -c spack -n "__fish_spack_using_command buildcache sync" -l src-mirror-url -r -d "URL of the source mirror"
# ['--dest-directory'] -> 'dest_directory': None
complete -c spack -n "__fish_spack_using_command buildcache sync" -l dest-directory -r -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command buildcache sync" -l dest-directory -r -d "Destination mirror as a local file path"
# ['--dest-mirror-name'] -> 'dest_mirror_name': None
complete -c spack -n "__fish_spack_using_command buildcache sync" -l dest-mirror-name -r -f -a "(__fish_spack_mirrors)"
complete -c spack -n "__fish_spack_using_command buildcache sync" -l dest-mirror-name -r -d "Name of the destination mirror"
# ['--dest-mirror-url'] -> 'dest_mirror_url': None
complete -c spack -n "__fish_spack_using_command buildcache sync" -l dest-mirror-url -r -d "URL of the destination mirror"

# spack buildcache update-index
set -g __fish_spack_optspecs_spack_buildcache_update_index "h/help" "d/mirror-url=" "k/keys"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command buildcache update-index" -s h -l help -d "show this help message and exit"
# ['-d', '--mirror-url'] -> 'mirror_url': None
complete -c spack -n "__fish_spack_using_command buildcache update-index" -s d -l mirror-url -r -d "Destination mirror url"
# ['-k', '--keys'] -> 'keys': 0
complete -c spack -n "__fish_spack_using_command buildcache update-index" -s k -l keys -d "If provided, key index will be updated as well as package index"

# spack cd
set -g __fish_spack_optspecs_spack_cd "h/help" "m/module-dir" "r/spack-root" "i/install-dir" "p/package-dir" "P/packages" "s/stage-dir" "S/stages" "source-dir" "b/build-dir" "e/env="
# 0 -> spec None (package spec): '...'
complete -c spack -n "__fish_spack_using_command cd" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command cd" -s h -l help -d "show this help message and exit"
# ['-m', '--module-dir'] -> 'module_dir': 0
complete -c spack -n "__fish_spack_using_command cd" -s m -l module-dir -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command cd" -s m -l module-dir -d "spack python module directory"
# ['-r', '--spack-root'] -> 'spack_root': 0
complete -c spack -n "__fish_spack_using_command cd" -s r -l spack-root -d "spack installation root"
# ['-i', '--install-dir'] -> 'install_dir': 0
complete -c spack -n "__fish_spack_using_command cd" -s i -l install-dir -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command cd" -s i -l install-dir -d "install prefix for spec (spec need not be installed)"
# ['-p', '--package-dir'] -> 'package_dir': 0
complete -c spack -n "__fish_spack_using_command cd" -s p -l package-dir -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command cd" -s p -l package-dir -d "directory enclosing a spec's package.py file"
# ['-P', '--packages'] -> 'packages': 0
complete -c spack -n "__fish_spack_using_command cd" -s P -l packages -d "top-level packages directory for Spack"
# ['-s', '--stage-dir'] -> 'stage_dir': 0
complete -c spack -n "__fish_spack_using_command cd" -s s -l stage-dir -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command cd" -s s -l stage-dir -d "stage directory for a spec"
# ['-S', '--stages'] -> 'stages': 0
complete -c spack -n "__fish_spack_using_command cd" -s S -l stages -d "top level stage directory"
# ['--source-dir'] -> 'source_dir': 0
complete -c spack -n "__fish_spack_using_command cd" -l source-dir -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command cd" -l source-dir -d "source directory for a spec (requires it to be staged first)"
# ['-b', '--build-dir'] -> 'build_dir': 0
complete -c spack -n "__fish_spack_using_command cd" -s b -l build-dir -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command cd" -s b -l build-dir -d "build directory for a spec (requires it to be staged first)"
# ['-e', '--env'] -> 'location_env': '?'
complete -c spack -n "__fish_spack_using_command cd" -s e -l env -r -f -a "(__fish_complete_directories)"
complete -c spack -n "__fish_spack_using_command cd" -s e -l env -r -d "location of the named or current environment"

# spack checksum
set -g __fish_spack_optspecs_spack_checksum "h/help" "keep-stage" "b/batch" "l/latest" "p/preferred"
# 0 -> package None (package name): None
complete -c spack -n "__fish_spack_using_command_pos 0 checksum" -f -a "(__fish_spack_packages)"
# 1 -> versions None (versions to generate checksums for): '...'
complete -c spack -n "__fish_spack_using_command checksum" -f -a '(__fish_spack_package_versions $__fish_spack_argparse_argv[1])'
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command checksum" -s h -l help -d "show this help message and exit"
# ['--keep-stage'] -> 'keep_stage': 0
complete -c spack -n "__fish_spack_using_command checksum" -l keep-stage -d "don't clean up staging area when command completes"
# ['-b', '--batch'] -> 'batch': 0
complete -c spack -n "__fish_spack_using_command checksum" -s b -l batch -d "don't ask which versions to checksum"
# ['-l', '--latest'] -> 'latest': 0
complete -c spack -n "__fish_spack_using_command checksum" -s l -l latest -d "checksum the latest available version only"
# ['-p', '--preferred'] -> 'preferred': 0
complete -c spack -n "__fish_spack_using_command checksum" -s p -l preferred -d "checksum the preferred version only"

# spack ci
set -g __fish_spack_optspecs_spack_ci "h/help"
complete -c spack -n "__fish_spack_using_command_pos 0 ci" -f -a generate -d "Generate jobs file from a spack environment file containing CI info."
complete -c spack -n "__fish_spack_using_command_pos 0 ci" -f -a rebuild-index -d "Rebuild the buildcache index associated with the mirror in the"
complete -c spack -n "__fish_spack_using_command_pos 0 ci" -f -a rebuild -d "Check a single spec against the remote mirror, and rebuild it from"
complete -c spack -n "__fish_spack_using_command_pos 0 ci" -f -a reproduce-build
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command ci" -s h -l help -d "show this help message and exit"

# spack ci generate
set -g __fish_spack_optspecs_spack_ci_generate "h/help" "output-file=" "copy-to=" "optimize" "dependencies" "prune-dag" "no-prune-dag" "check-index-only" "artifacts-root="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command ci generate" -s h -l help -d "show this help message and exit"
# ['--output-file'] -> 'output_file': None
complete -c spack -n "__fish_spack_using_command ci generate" -l output-file -r -d "Path to file where generated jobs file should be written.  The default is .gitlab-ci.yml in the root of the repository."
# ['--copy-to'] -> 'copy_to': None
complete -c spack -n "__fish_spack_using_command ci generate" -l copy-to -r -d "Absolute path of additional location where generated jobs yaml file should be copied.  Default is not to copy."
# ['--optimize'] -> 'optimize': 0
complete -c spack -n "__fish_spack_using_command ci generate" -l optimize -d "(Experimental) run the generated document through a series of optimization passes designed to reduce the size of the generated file."
# ['--dependencies'] -> 'dependencies': 0
complete -c spack -n "__fish_spack_using_command ci generate" -l dependencies -d "(Experimental) disable DAG scheduling; use  "plain" dependencies."
# ['--prune-dag'] -> 'prune_dag': 0
complete -c spack -n "__fish_spack_using_command ci generate" -l prune-dag -d "Do not generate jobs for specs already up to date on the mirror"
# ['--no-prune-dag'] -> 'prune_dag': 0
complete -c spack -n "__fish_spack_using_command ci generate" -l no-prune-dag -d "Generate jobs for specs already up to date on the mirror"
# ['--check-index-only'] -> 'index_only': 0
complete -c spack -n "__fish_spack_using_command ci generate" -l check-index-only -d "Spack always check specs against configured binary mirrors when generating the pipeline, regardless of whether or not DAG pruning is enabled.  This flag controls whether it might attempt to fetch remote spec files directly (ensuring no spec is rebuilt if it is present on the mirror), or whether it should reduce pipeline generation time by assuming all remote buildcache indices are up to date and only use those to determine whether a given spec is up to date on mirrors.  In the latter case, specs might be needlessly rebuilt if remote buildcache indices are out of date."
# ['--artifacts-root'] -> 'artifacts_root': None
complete -c spack -n "__fish_spack_using_command ci generate" -l artifacts-root -r -d "Path to root of artifacts directory.  If provided, concrete environment files (spack.yaml, spack.lock) will be generated under this path and their location sent to generated child jobs via the custom job variable SPACK_CONCRETE_ENVIRONMENT_PATH."

# spack ci rebuild-index
set -g __fish_spack_optspecs_spack_ci_rebuild_index "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command ci rebuild-index" -s h -l help -d "show this help message and exit"

# spack ci rebuild
set -g __fish_spack_optspecs_spack_ci_rebuild "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command ci rebuild" -s h -l help -d "show this help message and exit"

# spack ci reproduce-build
set -g __fish_spack_optspecs_spack_ci_reproduce_build "h/help" "working-dir="
# 0 -> job_url None (Url of job artifacts bundle): None
complete -c spack -n "__fish_spack_using_command_pos 0 ci reproduce-build" -f
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command ci reproduce-build" -s h -l help -d "show this help message and exit"
# ['--working-dir'] -> 'working_dir': None
complete -c spack -n "__fish_spack_using_command ci reproduce-build" -l working-dir -r -f -a "(__fish_complete_directories)"
complete -c spack -n "__fish_spack_using_command ci reproduce-build" -l working-dir -r -d "Where to unpack artifacts"

# spack clean
set -g __fish_spack_optspecs_spack_clean "h/help" "s/stage" "d/downloads" "f/failures" "m/misc-cache" "p/python-cache" "b/bootstrap" "a/all"
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command clean" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command clean" -s h -l help -d "show this help message and exit"
# ['-s', '--stage'] -> 'stage': 0
complete -c spack -n "__fish_spack_using_command clean" -s s -l stage -d "remove all temporary build stages (default)"
# ['-d', '--downloads'] -> 'downloads': 0
complete -c spack -n "__fish_spack_using_command clean" -s d -l downloads -d "remove cached downloads"
# ['-f', '--failures'] -> 'failures': 0
complete -c spack -n "__fish_spack_using_command clean" -s f -l failures -d "force removal of all install failure tracking markers"
# ['-m', '--misc-cache'] -> 'misc_cache': 0
complete -c spack -n "__fish_spack_using_command clean" -s m -l misc-cache -d "remove long-lived caches, like the virtual package index"
# ['-p', '--python-cache'] -> 'python_cache': 0
complete -c spack -n "__fish_spack_using_command clean" -s p -l python-cache -d "remove .pyc, .pyo files and __pycache__ folders"
# ['-b', '--bootstrap'] -> 'bootstrap': 0
complete -c spack -n "__fish_spack_using_command clean" -s b -l bootstrap -d "remove software and configuration needed to bootstrap Spack"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command clean" -s a -l all -d "equivalent to -sdfmp (does not include --bootstrap)"

# spack clone
set -g __fish_spack_optspecs_spack_clone "h/help" "r/remote="
# 0 -> prefix None (name of prefix where we should install spack): None
complete -c spack -n "__fish_spack_using_command_pos 0 clone" -f -a "(__fish_complete_directories)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command clone" -s h -l help -d "show this help message and exit"
# ['-r', '--remote'] -> 'remote': None
complete -c spack -n "__fish_spack_using_command clone" -s r -l remote -r -d "name of the remote to clone from"

# spack commands
set -g __fish_spack_optspecs_spack_commands "h/help" "update-completion" "a/aliases" "format=" "header=" "update="
# 0 -> rst_files None (list of rst files to search for `_cmd-spack-<cmd>` cross-refs): '...'
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command commands" -s h -l help -d "show this help message and exit"
# ['--update-completion'] -> 'update_completion': 0
complete -c spack -n "__fish_spack_using_command commands" -l update-completion -d "regenerate spack's tab completion scripts"
# ['-a', '--aliases'] -> 'aliases': 0
complete -c spack -n "__fish_spack_using_command commands" -s a -l aliases -d "include command aliases"
# ['--format'] -> ['subcommands', 'rst', 'names', 'bash', 'fish']: None
complete -c spack -n "__fish_spack_using_command commands" -l format -r -f -a "subcommands rst names bash fish"
complete -c spack -n "__fish_spack_using_command commands" -l format -r -d "format to be used to print the output (default: names)"
# ['--header'] -> 'header': None
complete -c spack -n "__fish_spack_using_command commands" -l header -r -d "prepend contents of FILE to the output (useful for rst format)"
# ['--update'] -> 'update': None
complete -c spack -n "__fish_spack_using_command commands" -l update -r -d "write output to the specified file, if any command is newer"

# spack compiler
set -g __fish_spack_optspecs_spack_compiler "h/help"
complete -c spack -n "__fish_spack_using_command_pos 0 compiler" -f -a find -d "search the system for compilers to add to Spack configuration"
complete -c spack -n "__fish_spack_using_command_pos 0 compiler" -f -a add -d "search the system for compilers to add to Spack configuration"
complete -c spack -n "__fish_spack_using_command_pos 0 compiler" -f -a remove -d "remove compiler by spec"
complete -c spack -n "__fish_spack_using_command_pos 0 compiler" -f -a rm -d "remove compiler by spec"
complete -c spack -n "__fish_spack_using_command_pos 0 compiler" -f -a list -d "list available compilers"
complete -c spack -n "__fish_spack_using_command_pos 0 compiler" -f -a info -d "show compiler paths"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command compiler" -s h -l help -d "show this help message and exit"

# spack compiler find
set -g __fish_spack_optspecs_spack_compiler_find "h/help" "scope="
# 0 -> add_paths None (): '...'
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command compiler find" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command compiler find" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command compiler find" -l scope -r -d "configuration scope to modify"

# spack compiler add
set -g __fish_spack_optspecs_spack_compiler_add "h/help" "scope="
# 0 -> add_paths None (): '...'
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command compiler add" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command compiler add" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command compiler add" -l scope -r -d "configuration scope to modify"

# spack compiler remove
set -g __fish_spack_optspecs_spack_compiler_remove "h/help" "a/all" "scope="
# 0 -> compiler_spec None (): None
complete -c spack -n "__fish_spack_using_command_pos 0 compiler remove" -f -a "(__fish_spack_installed_compilers)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command compiler remove" -s h -l help -d "show this help message and exit"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command compiler remove" -s a -l all -d "remove ALL compilers that match spec"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command compiler remove" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command compiler remove" -l scope -r -d "configuration scope to modify"

# spack compiler rm
set -g __fish_spack_optspecs_spack_compiler_rm "h/help" "a/all" "scope="
# 0 -> compiler_spec None (): None
complete -c spack -n "__fish_spack_using_command_pos 0 compiler rm" -f -a "(__fish_spack_installed_compilers)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command compiler rm" -s h -l help -d "show this help message and exit"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command compiler rm" -s a -l all -d "remove ALL compilers that match spec"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command compiler rm" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command compiler rm" -l scope -r -d "configuration scope to modify"

# spack compiler list
set -g __fish_spack_optspecs_spack_compiler_list "h/help" "scope="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command compiler list" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command compiler list" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command compiler list" -l scope -r -d "configuration scope to read from"

# spack compiler info
set -g __fish_spack_optspecs_spack_compiler_info "h/help" "scope="
# 0 -> compiler_spec None (): None
complete -c spack -n "__fish_spack_using_command_pos 0 compiler info" -f -a "(__fish_spack_installed_compilers)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command compiler info" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command compiler info" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command compiler info" -l scope -r -d "configuration scope to read from"

# spack compilers
set -g __fish_spack_optspecs_spack_compilers "h/help" "scope="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command compilers" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command compilers" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command compilers" -l scope -r -d "configuration scope to read/modify"

# spack concretize
set -g __fish_spack_optspecs_spack_concretize "h/help" "f/force" "test=" "U/fresh" "reuse"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command concretize" -s h -l help -d "show this help message and exit"
# ['-f', '--force'] -> 'force': 0
complete -c spack -n "__fish_spack_using_command concretize" -s f -l force -d "Re-concretize even if already concretized."
# ['--test'] -> ['root', 'all']: None
complete -c spack -n "__fish_spack_using_command concretize" -l test -r -f -a "root all"
complete -c spack -n "__fish_spack_using_command concretize" -l test -r -d "Concretize with test dependencies. When 'root' is chosen, test dependencies are only added for the environment's root specs. When 'all' is chosen, test dependencies are enabled for all packages in the environment."
# ['-U', '--fresh'] -> 'concretizer_reuse': 0
complete -c spack -n "__fish_spack_using_command concretize" -s U -l fresh -d "do not reuse installed deps; build newest configuration"
# ['--reuse'] -> 'concretizer_reuse': 0
complete -c spack -n "__fish_spack_using_command concretize" -l reuse -d "reuse installed dependencies/buildcaches when possible"

# spack config
set -g __fish_spack_optspecs_spack_config "h/help" "scope="
complete -c spack -n "__fish_spack_using_command_pos 0 config" -f -a get -d "print configuration values"
complete -c spack -n "__fish_spack_using_command_pos 0 config" -f -a blame -d "print configuration annotated with source file:line"
complete -c spack -n "__fish_spack_using_command_pos 0 config" -f -a edit -d "edit configuration file"
complete -c spack -n "__fish_spack_using_command_pos 0 config" -f -a list -d "list configuration sections"
complete -c spack -n "__fish_spack_using_command_pos 0 config" -f -a add -d "add configuration parameters"
complete -c spack -n "__fish_spack_using_command_pos 0 config" -f -a prefer-upstream -d "set package preferences from upstream"
complete -c spack -n "__fish_spack_using_command_pos 0 config" -f -a remove -d "remove configuration parameters"
complete -c spack -n "__fish_spack_using_command_pos 0 config" -f -a rm -d "remove configuration parameters"
complete -c spack -n "__fish_spack_using_command_pos 0 config" -f -a update -d "update configuration files to the latest format"
complete -c spack -n "__fish_spack_using_command_pos 0 config" -f -a revert -d "revert configuration files to their state before update"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command config" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command config" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command config" -l scope -r -d "configuration scope to read/modify"

# spack config get
set -g __fish_spack_optspecs_spack_config_get "h/help"
# 0 -> section ['compilers', 'concretizer', 'mirrors', 'repos', 'packages', 'modules', 'config', 'upstreams', 'bootstrap'] (configuration section to print. options: compilers, concretizer, mirrors, repos, packages, modules, config, upstreams, bootstrap): '?'
complete -c spack -n "__fish_spack_using_command_pos 0 config get" -f -a "compilers concretizer mirrors repos packages modules config upstreams bootstrap"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command config get" -s h -l help -d "show this help message and exit"

# spack config blame
set -g __fish_spack_optspecs_spack_config_blame "h/help"
# 0 -> section ['compilers', 'concretizer', 'mirrors', 'repos', 'packages', 'modules', 'config', 'upstreams', 'bootstrap'] (configuration section to print. options: compilers, concretizer, mirrors, repos, packages, modules, config, upstreams, bootstrap): None
complete -c spack -n "__fish_spack_using_command_pos 0 config blame" -f -a "compilers concretizer mirrors repos packages modules config upstreams bootstrap"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command config blame" -s h -l help -d "show this help message and exit"

# spack config edit
set -g __fish_spack_optspecs_spack_config_edit "h/help" "print-file"
# 0 -> section ['compilers', 'concretizer', 'mirrors', 'repos', 'packages', 'modules', 'config', 'upstreams', 'bootstrap'] (configuration section to edit. options: compilers, concretizer, mirrors, repos, packages, modules, config, upstreams, bootstrap): '?'
complete -c spack -n "__fish_spack_using_command_pos 0 config edit" -f -a "compilers concretizer mirrors repos packages modules config upstreams bootstrap"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command config edit" -s h -l help -d "show this help message and exit"
# ['--print-file'] -> 'print_file': 0
complete -c spack -n "__fish_spack_using_command config edit" -l print-file -d "print the file name that would be edited"

# spack config list
set -g __fish_spack_optspecs_spack_config_list "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command config list" -s h -l help -d "show this help message and exit"

# spack config add
set -g __fish_spack_optspecs_spack_config_add "h/help" "f/file="
# 0 -> path None (colon-separated path to config that should be added, e.g. 'config:default:true'): '?'
complete -c spack -n "__fish_spack_using_command_pos 0 config add" -f -a "(__fish_spack_colon_path)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command config add" -s h -l help -d "show this help message and exit"
# ['-f', '--file'] -> 'file': None
complete -c spack -n "__fish_spack_using_command config add" -s f -l file -r -d "file from which to set all config values"

# spack config prefer-upstream
set -g __fish_spack_optspecs_spack_config_prefer_upstream "h/help" "local"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command config prefer-upstream" -s h -l help -d "show this help message and exit"
# ['--local'] -> 'local': 0
complete -c spack -n "__fish_spack_using_command config prefer-upstream" -l local -d "Set packages preferences based on local installs, rather than upstream."

# spack config remove
set -g __fish_spack_optspecs_spack_config_remove "h/help"
# 0 -> path None (colon-separated path to config that should be removed, e.g. 'config:default:true'): None
complete -c spack -n "__fish_spack_using_command_pos 0 config remove" -f -a "(__fish_spack_colon_path)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command config remove" -s h -l help -d "show this help message and exit"

# spack config rm
set -g __fish_spack_optspecs_spack_config_rm "h/help"
# 0 -> path None (colon-separated path to config that should be removed, e.g. 'config:default:true'): None
complete -c spack -n "__fish_spack_using_command_pos 0 config rm" -f -a "(__fish_spack_colon_path)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command config rm" -s h -l help -d "show this help message and exit"

# spack config update
set -g __fish_spack_optspecs_spack_config_update "h/help" "y/yes-to-all"
# 0 -> section None (section to update): None
complete -c spack -n "__fish_spack_using_command_pos 0 config update" -f -a "(__fish_spack_config_sections)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command config update" -s h -l help -d "show this help message and exit"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command config update" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"

# spack config revert
set -g __fish_spack_optspecs_spack_config_revert "h/help" "y/yes-to-all"
# 0 -> section None (section to update): None
complete -c spack -n "__fish_spack_using_command_pos 0 config revert" -f -a "(__fish_spack_config_sections)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command config revert" -s h -l help -d "show this help message and exit"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command config revert" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"

# spack containerize
set -g __fish_spack_optspecs_spack_containerize "h/help" "monitor" "monitor-save-local" "monitor-tags=" "monitor-keep-going" "monitor-host=" "monitor-prefix=" "list-os" "last-stage="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command containerize" -s h -l help -d "show this help message and exit"
# ['--monitor'] -> 'use_monitor': 0
complete -c spack -n "__fish_spack_using_command containerize" -l monitor -d "interact with a monitor server during builds."
# ['--monitor-save-local'] -> 'monitor_save_local': 0
complete -c spack -n "__fish_spack_using_command containerize" -l monitor-save-local -d "save monitor results to .spack instead of server."
# ['--monitor-tags'] -> 'monitor_tags': None
complete -c spack -n "__fish_spack_using_command containerize" -l monitor-tags -r -d "One or more (comma separated) tags for a build."
# ['--monitor-keep-going'] -> 'monitor_keep_going': 0
complete -c spack -n "__fish_spack_using_command containerize" -l monitor-keep-going -d "continue the build if a request to monitor fails."
# ['--monitor-host'] -> 'monitor_host': None
complete -c spack -n "__fish_spack_using_command containerize" -l monitor-host -r -d "If using a monitor, customize the host."
# ['--monitor-prefix'] -> 'monitor_prefix': None
complete -c spack -n "__fish_spack_using_command containerize" -l monitor-prefix -r -d "The API prefix for the monitor service."
# ['--list-os'] -> 'list_os': 0
complete -c spack -n "__fish_spack_using_command containerize" -l list-os -d "list all the OS that can be used in the bootstrap phase and exit"
# ['--last-stage'] -> ['bootstrap', 'build', 'final']: None
complete -c spack -n "__fish_spack_using_command containerize" -l last-stage -r -f -a "bootstrap build final"
complete -c spack -n "__fish_spack_using_command containerize" -l last-stage -r -d "last stage in the container recipe"

# spack create
set -g __fish_spack_optspecs_spack_create "h/help" "keep-stage" "n/name=" "t/template=" "r/repo=" "N/namespace=" "f/force" "skip-editor" "b/batch"
# 0 -> url None (url of package archive): '?'
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command create" -s h -l help -d "show this help message and exit"
# ['--keep-stage'] -> 'keep_stage': 0
complete -c spack -n "__fish_spack_using_command create" -l keep-stage -d "don't clean up staging area when command completes"
# ['-n', '--name'] -> 'name': None
complete -c spack -n "__fish_spack_using_command create" -s n -l name -r -d "name of the package to create"
# ['-t', '--template'] -> ['autoreconf', 'autotools', 'bazel', 'bundle', 'cmake', 'generic', 'intel', 'makefile', 'maven', 'meson', 'octave', 'perlbuild', 'perlmake', 'python', 'qmake', 'r', 'ruby', 'scons', 'sip', 'waf']: None
complete -c spack -n "__fish_spack_using_command create" -s t -l template -r -f -a "autoreconf autotools bazel bundle cmake generic intel makefile maven meson octave perlbuild perlmake python qmake r ruby scons sip waf"
complete -c spack -n "__fish_spack_using_command create" -s t -l template -r -d "build system template to use. options: autoreconf, autotools, bazel, bundle, cmake, generic, intel, makefile, maven, meson, octave, perlbuild, perlmake, python, qmake, r, ruby, scons, sip, waf"
# ['-r', '--repo'] -> 'repo': None
complete -c spack -n "__fish_spack_using_command create" -s r -l repo -r -d "path to a repository where the package should be created"
# ['-N', '--namespace'] -> 'namespace': None
complete -c spack -n "__fish_spack_using_command create" -s N -l namespace -r -d "specify a namespace for the package. must be the namespace of a repository registered with Spack"
# ['-f', '--force'] -> 'force': 0
complete -c spack -n "__fish_spack_using_command create" -s f -l force -d "overwrite any existing package file with the same name"
# ['--skip-editor'] -> 'skip_editor': 0
complete -c spack -n "__fish_spack_using_command create" -l skip-editor -d "skip the edit session for the package (e.g., automation)"
# ['-b', '--batch'] -> 'batch': 0
complete -c spack -n "__fish_spack_using_command create" -s b -l batch -d "don't ask which versions to checksum"

# spack deactivate
set -g __fish_spack_optspecs_spack_deactivate "h/help" "f/force" "v/view=" "a/all"
# 0 -> installed_spec None (installed package spec): '...'
complete -c spack -n "__fish_spack_using_command deactivate" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command deactivate" -s h -l help -d "show this help message and exit"
# ['-f', '--force'] -> 'force': 0
complete -c spack -n "__fish_spack_using_command deactivate" -s f -l force -d "run deactivation even if spec is NOT currently activated"
# ['-v', '--view'] -> 'view': None
complete -c spack -n "__fish_spack_using_command deactivate" -s v -l view -r -d "the view to operate on"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command deactivate" -s a -l all -d "deactivate all extensions of an extendable package, or deactivate an extension AND its dependencies"

# spack debug
set -g __fish_spack_optspecs_spack_debug "h/help"
complete -c spack -n "__fish_spack_using_command_pos 0 debug" -f -a create-db-tarball -d "create a tarball of Spack's installation metadata"
complete -c spack -n "__fish_spack_using_command_pos 0 debug" -f -a report -d "print information useful for bug reports"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command debug" -s h -l help -d "show this help message and exit"

# spack debug create-db-tarball
set -g __fish_spack_optspecs_spack_debug_create_db_tarball "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command debug create-db-tarball" -s h -l help -d "show this help message and exit"

# spack debug report
set -g __fish_spack_optspecs_spack_debug_report "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command debug report" -s h -l help -d "show this help message and exit"

# spack dependencies
set -g __fish_spack_optspecs_spack_dependencies "h/help" "i/installed" "t/transitive" "deptype=" "V/no-expand-virtuals"
# 0 -> spec None (package spec): '...'
complete -c spack -n "__fish_spack_using_command dependencies" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command dependencies" -s h -l help -d "show this help message and exit"
# ['-i', '--installed'] -> 'installed': 0
complete -c spack -n "__fish_spack_using_command dependencies" -s i -l installed -d "List installed dependencies of an installed spec, instead of possible dependencies of a package."
# ['-t', '--transitive'] -> 'transitive': 0
complete -c spack -n "__fish_spack_using_command dependencies" -s t -l transitive -d "show all transitive dependencies"
# ['--deptype'] -> 'deptype': None
complete -c spack -n "__fish_spack_using_command dependencies" -l deptype -r -d "comma-separated list of deptypes to traverse default=build,link,run,test"
# ['-V', '--no-expand-virtuals'] -> 'expand_virtuals': 0
complete -c spack -n "__fish_spack_using_command dependencies" -s V -l no-expand-virtuals -d "do not expand virtual dependencies"

# spack dependents
set -g __fish_spack_optspecs_spack_dependents "h/help" "i/installed" "t/transitive"
# 0 -> spec None (package spec): '...'
complete -c spack -n "__fish_spack_using_command dependents" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command dependents" -s h -l help -d "show this help message and exit"
# ['-i', '--installed'] -> 'installed': 0
complete -c spack -n "__fish_spack_using_command dependents" -s i -l installed -d "List installed dependents of an installed spec, instead of possible dependents of a package."
# ['-t', '--transitive'] -> 'transitive': 0
complete -c spack -n "__fish_spack_using_command dependents" -s t -l transitive -d "Show all transitive dependents."

# spack deprecate
set -g __fish_spack_optspecs_spack_deprecate "h/help" "y/yes-to-all" "d/dependencies" "D/no-dependencies" "i/install-deprecator" "I/no-install-deprecator" "l/link-type="
# 0 -> specs None (spec to deprecate and spec to use as deprecator): '...'
complete -c spack -n "__fish_spack_using_command deprecate" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command deprecate" -s h -l help -d "show this help message and exit"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command deprecate" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"
# ['-d', '--dependencies'] -> 'dependencies': 0
complete -c spack -n "__fish_spack_using_command deprecate" -s d -l dependencies -d "Deprecate dependencies (default)"
# ['-D', '--no-dependencies'] -> 'dependencies': 0
complete -c spack -n "__fish_spack_using_command deprecate" -s D -l no-dependencies -d "Do not deprecate dependencies"
# ['-i', '--install-deprecator'] -> 'install': 0
complete -c spack -n "__fish_spack_using_command deprecate" -s i -l install-deprecator -d "Concretize and install deprecator spec"
# ['-I', '--no-install-deprecator'] -> 'install': 0
complete -c spack -n "__fish_spack_using_command deprecate" -s I -l no-install-deprecator -d "Deprecator spec must already be installed (default)"
# ['-l', '--link-type'] -> ['soft', 'hard']: None
complete -c spack -n "__fish_spack_using_command deprecate" -s l -l link-type -r -f -a "soft hard"
complete -c spack -n "__fish_spack_using_command deprecate" -s l -l link-type -r -d "Type of filesystem link to use for deprecation (default soft)"

# spack dev-build
set -g __fish_spack_optspecs_spack_dev_build "h/help" "j/jobs=" "d/source-path=" "i/ignore-dependencies" "n/no-checksum" "deprecated" "keep-prefix" "skip-patch" "q/quiet" "drop-in=" "test=" "b/before=" "u/until=" "clean" "dirty" "U/fresh" "reuse"
# 0 -> spec None (package spec): '...'
complete -c spack -n "__fish_spack_using_command dev-build" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command dev-build" -s h -l help -d "show this help message and exit"
# ['-j', '--jobs'] -> 'jobs': None
complete -c spack -n "__fish_spack_using_command dev-build" -s j -l jobs -r -d "explicitly set number of parallel jobs"
# ['-d', '--source-path'] -> 'source_path': None
complete -c spack -n "__fish_spack_using_command dev-build" -s d -l source-path -r -d "path to source directory. defaults to the current directory"
# ['-i', '--ignore-dependencies'] -> 'ignore_deps': 0
complete -c spack -n "__fish_spack_using_command dev-build" -s i -l ignore-dependencies -d "don't try to install dependencies of requested packages"
# ['-n', '--no-checksum'] -> 'no_checksum': 0
complete -c spack -n "__fish_spack_using_command dev-build" -s n -l no-checksum -d "do not use checksums to verify downloaded files (unsafe)"
# ['--deprecated'] -> 'deprecated': 0
complete -c spack -n "__fish_spack_using_command dev-build" -l deprecated -d "fetch deprecated versions without warning"
# ['--keep-prefix'] -> 'keep_prefix': 0
complete -c spack -n "__fish_spack_using_command dev-build" -l keep-prefix -d "do not remove the install prefix if installation fails"
# ['--skip-patch'] -> 'skip_patch': 0
complete -c spack -n "__fish_spack_using_command dev-build" -l skip-patch -d "skip patching for the developer build"
# ['-q', '--quiet'] -> 'quiet': 0
complete -c spack -n "__fish_spack_using_command dev-build" -s q -l quiet -d "do not display verbose build output while installing"
# ['--drop-in'] -> 'shell': None
complete -c spack -n "__fish_spack_using_command dev-build" -l drop-in -r -d "drop into a build environment in a new shell, e.g. bash, zsh"
# ['--test'] -> ['root', 'all']: None
complete -c spack -n "__fish_spack_using_command dev-build" -l test -r -f -a "root all"
complete -c spack -n "__fish_spack_using_command dev-build" -l test -r -d "If 'root' is chosen, run package tests during installation for top-level packages (but skip tests for dependencies). if 'all' is chosen, run package tests during installation for all packages. If neither are chosen, don't run tests for any packages."
# ['-b', '--before'] -> 'before': None
complete -c spack -n "__fish_spack_using_command dev-build" -s b -l before -r -d "phase to stop before when installing (default None)"
# ['-u', '--until'] -> 'until': None
complete -c spack -n "__fish_spack_using_command dev-build" -s u -l until -r -d "phase to stop after when installing (default None)"
# ['--clean'] -> 'dirty': 0
complete -c spack -n "__fish_spack_using_command dev-build" -l clean -d "unset harmful variables in the build environment (default)"
# ['--dirty'] -> 'dirty': 0
complete -c spack -n "__fish_spack_using_command dev-build" -l dirty -d "preserve user environment in spack's build environment (danger!)"
# ['-U', '--fresh'] -> 'concretizer_reuse': 0
complete -c spack -n "__fish_spack_using_command dev-build" -s U -l fresh -d "do not reuse installed deps; build newest configuration"
# ['--reuse'] -> 'concretizer_reuse': 0
complete -c spack -n "__fish_spack_using_command dev-build" -l reuse -d "reuse installed dependencies/buildcaches when possible"

# spack develop
set -g __fish_spack_optspecs_spack_develop "h/help" "p/path=" "no-clone" "clone" "f/force="
# 0 -> spec None (package spec): '...'
complete -c spack -n "__fish_spack_using_command develop" -f -k -a "(__fish_spack_specs_or_id)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command develop" -s h -l help -d "show this help message and exit"
# ['-p', '--path'] -> 'path': None
complete -c spack -n "__fish_spack_using_command develop" -s p -l path -r -d "Source location of package"
# ['--no-clone'] -> 'clone': 0
complete -c spack -n "__fish_spack_using_command develop" -l no-clone -d "Do not clone. The package already exists at the source path"
# ['--clone'] -> 'clone': 0
complete -c spack -n "__fish_spack_using_command develop" -l clone -d "Clone the package even if the path already exists"
# ['-f', '--force'] -> 'force': None
complete -c spack -n "__fish_spack_using_command develop" -s f -l force -r -d "Remove any files or directories that block cloning source code"

# spack diff
set -g __fish_spack_optspecs_spack_diff "h/help" "json" "first" "a/attribute="
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command diff" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command diff" -s h -l help -d "show this help message and exit"
# ['--json'] -> 'dump_json': 0
complete -c spack -n "__fish_spack_using_command diff" -l json -d "Dump json output instead of pretty printing."
# ['--first'] -> 'load_first': 0
complete -c spack -n "__fish_spack_using_command diff" -l first -d "load the first match if multiple packages match the spec"
# ['-a', '--attribute'] -> 'attribute': None
complete -c spack -n "__fish_spack_using_command diff" -s a -l attribute -r -d "select the attributes to show (defaults to all)"

# spack docs
set -g __fish_spack_optspecs_spack_docs "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command docs" -s h -l help -d "show this help message and exit"

# spack edit
set -g __fish_spack_optspecs_spack_edit "h/help" "b/build-system" "c/command" "d/docs" "t/test" "m/module" "r/repo=" "N/namespace="
# 0 -> package None (package name): '?'
complete -c spack -n "__fish_spack_using_command_pos 0 edit" -f -a "(__fish_spack_packages)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command edit" -s h -l help -d "show this help message and exit"
# ['-b', '--build-system'] -> 'path': 0
complete -c spack -n "__fish_spack_using_command edit" -s b -l build-system -d "Edit the build system with the supplied name."
# ['-c', '--command'] -> 'path': 0
complete -c spack -n "__fish_spack_using_command edit" -s c -l command -d "edit the command with the supplied name"
# ['-d', '--docs'] -> 'path': 0
complete -c spack -n "__fish_spack_using_command edit" -s d -l docs -d "edit the docs with the supplied name"
# ['-t', '--test'] -> 'path': 0
complete -c spack -n "__fish_spack_using_command edit" -s t -l test -d "edit the test with the supplied name"
# ['-m', '--module'] -> 'path': 0
complete -c spack -n "__fish_spack_using_command edit" -s m -l module -d "edit the main spack module with the supplied name"
# ['-r', '--repo'] -> 'repo': None
complete -c spack -n "__fish_spack_using_command edit" -s r -l repo -r -d "path to repo to edit package in"
# ['-N', '--namespace'] -> 'namespace': None
complete -c spack -n "__fish_spack_using_command edit" -s N -l namespace -r -d "namespace of package to edit"

# spack env
set -g __fish_spack_optspecs_spack_env "h/help"
complete -c spack -n "__fish_spack_using_command_pos 0 env" -f -a activate -d "set the current environment"
complete -c spack -n "__fish_spack_using_command_pos 0 env" -f -a deactivate -d "deactivate any active environment in the shell"
complete -c spack -n "__fish_spack_using_command_pos 0 env" -f -a create -d "create a new environment"
complete -c spack -n "__fish_spack_using_command_pos 0 env" -f -a remove -d "remove an existing environment"
complete -c spack -n "__fish_spack_using_command_pos 0 env" -f -a rm -d "remove an existing environment"
complete -c spack -n "__fish_spack_using_command_pos 0 env" -f -a list -d "list available environments"
complete -c spack -n "__fish_spack_using_command_pos 0 env" -f -a ls -d "list available environments"
complete -c spack -n "__fish_spack_using_command_pos 0 env" -f -a status -d "print whether there is an active environment"
complete -c spack -n "__fish_spack_using_command_pos 0 env" -f -a st -d "print whether there is an active environment"
complete -c spack -n "__fish_spack_using_command_pos 0 env" -f -a loads -d "list modules for an installed environment '(see spack module loads)'"
complete -c spack -n "__fish_spack_using_command_pos 0 env" -f -a view -d "manage a view associated with the environment"
complete -c spack -n "__fish_spack_using_command_pos 0 env" -f -a update -d "update environments to the latest format"
complete -c spack -n "__fish_spack_using_command_pos 0 env" -f -a revert -d "restore environments to their state before update"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command env" -s h -l help -d "show this help message and exit"

# spack env activate
set -g __fish_spack_optspecs_spack_env_activate "h/help" "sh" "csh" "fish" "bat" "v/with-view" "V/without-view" "p/prompt" "temp" "d/dir="
# 0 -> env None (name of environment to activate): '?'
complete -c spack -n "__fish_spack_using_command_pos 0 env activate" -f -a "(__fish_spack_environments)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command env activate" -s h -l help -d "show this help message and exit"
# ['--sh'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command env activate" -l sh -d "print sh commands to activate the environment"
# ['--csh'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command env activate" -l csh -d "print csh commands to activate the environment"
# ['--fish'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command env activate" -l fish -d "print fish commands to activate the environment"
# ['--bat'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command env activate" -l bat -d "print bat commands to activate the environment"
# ['-v', '--with-view'] -> 'with_view': 0
complete -c spack -n "__fish_spack_using_command env activate" -s v -l with-view -d "update PATH etc. with associated view"
# ['-V', '--without-view'] -> 'with_view': 0
complete -c spack -n "__fish_spack_using_command env activate" -s V -l without-view -d "do not update PATH etc. with associated view"
# ['-p', '--prompt'] -> 'prompt': 0
complete -c spack -n "__fish_spack_using_command env activate" -s p -l prompt -d "decorate the command line prompt when activating"
# ['--temp'] -> 'temp': 0
complete -c spack -n "__fish_spack_using_command env activate" -l temp -d "create and activate an environment in a temporary directory"
# ['-d', '--dir'] -> 'dir': None
complete -c spack -n "__fish_spack_using_command env activate" -s d -l dir -r -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command env activate" -s d -l dir -r -d "activate the environment in this directory"

# spack env deactivate
set -g __fish_spack_optspecs_spack_env_deactivate "h/help" "sh" "csh" "fish" "bat"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command env deactivate" -s h -l help -d "show this help message and exit"
# ['--sh'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command env deactivate" -l sh -d "print sh commands to deactivate the environment"
# ['--csh'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command env deactivate" -l csh -d "print csh commands to deactivate the environment"
# ['--fish'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command env deactivate" -l fish -d "print fish commands to activate the environment"
# ['--bat'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command env deactivate" -l bat -d "print bat commands to activate the environment"

# spack env create
set -g __fish_spack_optspecs_spack_env_create "h/help" "d/dir" "keep-relative" "without-view" "with-view="
# 0 -> env None (name of environment to create): None
complete -c spack -n "__fish_spack_using_command_pos 0 env create" -f -a "(__fish_spack_environments)"
# 1 -> envfile None (optional init file; can be spack.yaml or spack.lock): '?'
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command env create" -s h -l help -d "show this help message and exit"
# ['-d', '--dir'] -> 'dir': 0
complete -c spack -n "__fish_spack_using_command env create" -s d -l dir -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command env create" -s d -l dir -d "create an environment in a specific directory"
# ['--keep-relative'] -> 'keep_relative': 0
complete -c spack -n "__fish_spack_using_command env create" -l keep-relative -d "copy relative develop paths verbatim into the new environment when initializing from envfile"
# ['--without-view'] -> 'without_view': 0
complete -c spack -n "__fish_spack_using_command env create" -l without-view -d "do not maintain a view for this environment"
# ['--with-view'] -> 'with_view': None
complete -c spack -n "__fish_spack_using_command env create" -l with-view -r -d "specify that this environment should maintain a view at the specified path (by default the view is maintained in the environment directory)"

# spack env remove
set -g __fish_spack_optspecs_spack_env_remove "h/help" "y/yes-to-all"
# 0 -> env None (environment(s) to remove): '+'
complete -c spack -n "__fish_spack_using_command_pos 0 env remove" -f -a "(__fish_spack_environments)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command env remove" -s h -l help -d "show this help message and exit"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command env remove" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"

# spack env rm
set -g __fish_spack_optspecs_spack_env_rm "h/help" "y/yes-to-all"
# 0 -> env None (environment(s) to remove): '+'
complete -c spack -n "__fish_spack_using_command_pos 0 env rm" -f -a "(__fish_spack_environments)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command env rm" -s h -l help -d "show this help message and exit"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command env rm" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"

# spack env list
set -g __fish_spack_optspecs_spack_env_list "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command env list" -s h -l help -d "show this help message and exit"

# spack env ls
set -g __fish_spack_optspecs_spack_env_ls "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command env ls" -s h -l help -d "show this help message and exit"

# spack env status
set -g __fish_spack_optspecs_spack_env_status "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command env status" -s h -l help -d "show this help message and exit"

# spack env st
set -g __fish_spack_optspecs_spack_env_st "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command env st" -s h -l help -d "show this help message and exit"

# spack env loads
set -g __fish_spack_optspecs_spack_env_loads "h/help" "n/module-set-name=" "m/module-type=" "input-only" "p/prefix=" "x/exclude=" "r/dependencies"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command env loads" -s h -l help -d "show this help message and exit"
# ['-n', '--module-set-name'] -> 'module_set_name': None
complete -c spack -n "__fish_spack_using_command env loads" -s n -l module-set-name -r -d "module set for which to generate load operations"
# ['-m', '--module-type'] -> ['tcl', 'lmod']: None
complete -c spack -n "__fish_spack_using_command env loads" -s m -l module-type -r -f -a "tcl lmod"
complete -c spack -n "__fish_spack_using_command env loads" -s m -l module-type -r -d "type of module system to generate loads for"
# ['--input-only'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command env loads" -l input-only -d "generate input for module command (instead of a shell script)"
# ['-p', '--prefix'] -> 'prefix': None
complete -c spack -n "__fish_spack_using_command env loads" -s p -l prefix -r -f -a "(__fish_complete_directories)"
complete -c spack -n "__fish_spack_using_command env loads" -s p -l prefix -r -d "prepend to module names when issuing module load commands"
# ['-x', '--exclude'] -> 'exclude': None
complete -c spack -n "__fish_spack_using_command env loads" -s x -l exclude -r -d "exclude package from output; may be specified multiple times"
# ['-r', '--dependencies'] -> 'recurse_dependencies': 0
complete -c spack -n "__fish_spack_using_command env loads" -s r -l dependencies -d "recursively traverse spec dependencies"

# spack env view
set -g __fish_spack_optspecs_spack_env_view "h/help"
# 0 -> {regenerate,enable,disable} ['regenerate', 'enable', 'disable'] (action to take for the environment's view): None
complete -c spack -n "__fish_spack_using_command_pos 0 env view" -f -a "regenerate enable disable"
# 1 -> view_path None (when enabling a view, optionally set the path manually): '?'
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command env view" -s h -l help -d "show this help message and exit"

# spack env update
set -g __fish_spack_optspecs_spack_env_update "h/help" "y/yes-to-all"
# 0 -> env None (name or directory of the environment to activate): None
complete -c spack -n "__fish_spack_using_command_pos 0 env update" -f -a "(__fish_spack_environments)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command env update" -s h -l help -d "show this help message and exit"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command env update" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"

# spack env revert
set -g __fish_spack_optspecs_spack_env_revert "h/help" "y/yes-to-all"
# 0 -> env None (name or directory of the environment to activate): None
complete -c spack -n "__fish_spack_using_command_pos 0 env revert" -f -a "(__fish_spack_environments)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command env revert" -s h -l help -d "show this help message and exit"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command env revert" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"

# spack extensions
set -g __fish_spack_optspecs_spack_extensions "h/help" "l/long" "L/very-long" "d/deps" "p/paths" "s/show=" "v/view="
# 0 -> extendable None (spec of package to list extensions for): '...'
complete -c spack -n "__fish_spack_using_command extensions" -f -a "(__fish_spack_extensions)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command extensions" -s h -l help -d "show this help message and exit"
# ['-l', '--long'] -> 'long': 0
complete -c spack -n "__fish_spack_using_command extensions" -s l -l long -d "show dependency hashes as well as versions"
# ['-L', '--very-long'] -> 'very_long': 0
complete -c spack -n "__fish_spack_using_command extensions" -s L -l very-long -d "show full dependency hashes as well as versions"
# ['-d', '--deps'] -> 'deps': 0
complete -c spack -n "__fish_spack_using_command extensions" -s d -l deps -d "output dependencies along with found specs"
# ['-p', '--paths'] -> 'paths': 0
complete -c spack -n "__fish_spack_using_command extensions" -s p -l paths -d "show paths to package install directories"
# ['-s', '--show'] -> ['packages', 'installed', 'activated', 'all']: None
complete -c spack -n "__fish_spack_using_command extensions" -s s -l show -r -f -a "packages installed activated all"
complete -c spack -n "__fish_spack_using_command extensions" -s s -l show -r -d "show only part of output"
# ['-v', '--view'] -> 'view': None
complete -c spack -n "__fish_spack_using_command extensions" -s v -l view -r -d "the view to operate on"

# spack external
set -g __fish_spack_optspecs_spack_external "h/help"
complete -c spack -n "__fish_spack_using_command_pos 0 external" -f -a find -d "add external packages to packages.yaml"
complete -c spack -n "__fish_spack_using_command_pos 0 external" -f -a list -d "list detectable packages, by repository and name"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command external" -s h -l help -d "show this help message and exit"

# spack external find
set -g __fish_spack_optspecs_spack_external_find "h/help" "not-buildable" "scope=" "all" "t/tag="
# 0 -> packages None (): '...'
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command external find" -s h -l help -d "show this help message and exit"
# ['--not-buildable'] -> 'not_buildable': 0
complete -c spack -n "__fish_spack_using_command external find" -l not-buildable -d "packages with detected externals won't be built with Spack"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command external find" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command external find" -l scope -r -d "configuration scope to modify"
# ['--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command external find" -l all -d "search for all packages that Spack knows about"
# ['-t', '--tag'] -> 'tags': None
complete -c spack -n "__fish_spack_using_command external find" -s t -l tag -r -f -a "(__fish_spack_tags)"
complete -c spack -n "__fish_spack_using_command external find" -s t -l tag -r -d "filter a package query by tag (multiple use allowed)"

# spack external list
set -g __fish_spack_optspecs_spack_external_list "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command external list" -s h -l help -d "show this help message and exit"

# spack fetch
set -g __fish_spack_optspecs_spack_fetch "h/help" "n/no-checksum" "deprecated" "m/missing" "D/dependencies"
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command fetch" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command fetch" -s h -l help -d "show this help message and exit"
# ['-n', '--no-checksum'] -> 'no_checksum': 0
complete -c spack -n "__fish_spack_using_command fetch" -s n -l no-checksum -d "do not use checksums to verify downloaded files (unsafe)"
# ['--deprecated'] -> 'deprecated': 0
complete -c spack -n "__fish_spack_using_command fetch" -l deprecated -d "fetch deprecated versions without warning"
# ['-m', '--missing'] -> 'missing': 0
complete -c spack -n "__fish_spack_using_command fetch" -s m -l missing -d "fetch only missing (not yet installed) dependencies"
# ['-D', '--dependencies'] -> 'dependencies': 0
complete -c spack -n "__fish_spack_using_command fetch" -s D -l dependencies -d "also fetch all dependencies"

# spack find
set -g __fish_spack_optspecs_spack_find "h/help" "format=" "json" "d/deps" "p/paths" "groups" "no-groups" "l/long" "L/very-long" "t/tag=" "c/show-concretized" "f/show-flags" "show-full-compiler" "x/explicit" "X/implicit" "u/unknown" "m/missing" "v/variants" "loaded" "M/only-missing" "deprecated" "only-deprecated" "N/namespace" "start-date=" "end-date=" "b/bootstrap"
# 0 -> installed_specs None (constraint to select a subset of installed packages): '...'
complete -c spack -n "__fish_spack_using_command find" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command find" -s h -l help -d "show this help message and exit"
# ['--format'] -> 'format': None
complete -c spack -n "__fish_spack_using_command find" -l format -r -d "output specs with the specified format string"
# ['--json'] -> 'json': 0
complete -c spack -n "__fish_spack_using_command find" -l json -d "output specs as machine-readable json records"
# ['-d', '--deps'] -> 'deps': 0
complete -c spack -n "__fish_spack_using_command find" -s d -l deps -d "output dependencies along with found specs"
# ['-p', '--paths'] -> 'paths': 0
complete -c spack -n "__fish_spack_using_command find" -s p -l paths -d "show paths to package install directories"
# ['--groups'] -> 'groups': 0
complete -c spack -n "__fish_spack_using_command find" -l groups -d "display specs in arch/compiler groups (default on)"
# ['--no-groups'] -> 'groups': 0
complete -c spack -n "__fish_spack_using_command find" -l no-groups -d "do not group specs by arch/compiler"
# ['-l', '--long'] -> 'long': 0
complete -c spack -n "__fish_spack_using_command find" -s l -l long -d "show dependency hashes as well as versions"
# ['-L', '--very-long'] -> 'very_long': 0
complete -c spack -n "__fish_spack_using_command find" -s L -l very-long -d "show full dependency hashes as well as versions"
# ['-t', '--tag'] -> 'tags': None
complete -c spack -n "__fish_spack_using_command find" -s t -l tag -r -f -a "(__fish_spack_tags)"
complete -c spack -n "__fish_spack_using_command find" -s t -l tag -r -d "filter a package query by tag (multiple use allowed)"
# ['-c', '--show-concretized'] -> 'show_concretized': 0
complete -c spack -n "__fish_spack_using_command find" -s c -l show-concretized -d "show concretized specs in an environment"
# ['-f', '--show-flags'] -> 'show_flags': 0
complete -c spack -n "__fish_spack_using_command find" -s f -l show-flags -d "show spec compiler flags"
# ['--show-full-compiler'] -> 'show_full_compiler': 0
complete -c spack -n "__fish_spack_using_command find" -l show-full-compiler -d "show full compiler specs"
# ['-x', '--explicit'] -> 'explicit': 0
complete -c spack -n "__fish_spack_using_command find" -s x -l explicit -d "show only specs that were installed explicitly"
# ['-X', '--implicit'] -> 'implicit': 0
complete -c spack -n "__fish_spack_using_command find" -s X -l implicit -d "show only specs that were installed as dependencies"
# ['-u', '--unknown'] -> 'unknown': 0
complete -c spack -n "__fish_spack_using_command find" -s u -l unknown -d "show only specs Spack does not have a package for"
# ['-m', '--missing'] -> 'missing': 0
complete -c spack -n "__fish_spack_using_command find" -s m -l missing -d "show missing dependencies as well as installed specs"
# ['-v', '--variants'] -> 'variants': 0
complete -c spack -n "__fish_spack_using_command find" -s v -l variants -d "show variants in output (can be long)"
# ['--loaded'] -> 'loaded': 0
complete -c spack -n "__fish_spack_using_command find" -l loaded -d "show only packages loaded in the user environment"
# ['-M', '--only-missing'] -> 'only_missing': 0
complete -c spack -n "__fish_spack_using_command find" -s M -l only-missing -d "show only missing dependencies"
# ['--deprecated'] -> 'deprecated': 0
complete -c spack -n "__fish_spack_using_command find" -l deprecated -d "show deprecated packages as well as installed specs"
# ['--only-deprecated'] -> 'only_deprecated': 0
complete -c spack -n "__fish_spack_using_command find" -l only-deprecated -d "show only deprecated packages"
# ['-N', '--namespace'] -> 'namespace': 0
complete -c spack -n "__fish_spack_using_command find" -s N -l namespace -d "show fully qualified package names"
# ['--start-date'] -> 'start_date': None
complete -c spack -n "__fish_spack_using_command find" -l start-date -r -d "earliest date of installation [YYYY-MM-DD]"
# ['--end-date'] -> 'end_date': None
complete -c spack -n "__fish_spack_using_command find" -l end-date -r -d "latest date of installation [YYYY-MM-DD]"
# ['-b', '--bootstrap'] -> 'bootstrap': 0
complete -c spack -n "__fish_spack_using_command find" -s b -l bootstrap -d "show software in the internal bootstrap store"

# spack gc
set -g __fish_spack_optspecs_spack_gc "h/help" "y/yes-to-all"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command gc" -s h -l help -d "show this help message and exit"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command gc" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"

# spack gpg
set -g __fish_spack_optspecs_spack_gpg "h/help"
complete -c spack -n "__fish_spack_using_command_pos 0 gpg" -f -a verify -d "verify a signed package"
complete -c spack -n "__fish_spack_using_command_pos 0 gpg" -f -a trust -d "add a key to the keyring"
complete -c spack -n "__fish_spack_using_command_pos 0 gpg" -f -a untrust -d "remove a key from the keyring"
complete -c spack -n "__fish_spack_using_command_pos 0 gpg" -f -a sign -d "sign a package"
complete -c spack -n "__fish_spack_using_command_pos 0 gpg" -f -a create -d "create a new key"
complete -c spack -n "__fish_spack_using_command_pos 0 gpg" -f -a list -d "list keys available in the keyring"
complete -c spack -n "__fish_spack_using_command_pos 0 gpg" -f -a init -d "add the default keys to the keyring"
complete -c spack -n "__fish_spack_using_command_pos 0 gpg" -f -a export -d "export a gpg key, optionally including secret key."
complete -c spack -n "__fish_spack_using_command_pos 0 gpg" -f -a publish -d "publish public keys to a build cache"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command gpg" -s h -l help -d "show this help message and exit"

# spack gpg verify
set -g __fish_spack_optspecs_spack_gpg_verify "h/help"
# 0 -> installed_spec None (installed package spec): '...'
complete -c spack -n "__fish_spack_using_command gpg verify" -f -a "(__fish_spack_installed_specs)"
# 1 -> signature None (the signature file): '?'
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command gpg verify" -s h -l help -d "show this help message and exit"

# spack gpg trust
set -g __fish_spack_optspecs_spack_gpg_trust "h/help"
# 0 -> keyfile None (add a key to the trust store): None
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command gpg trust" -s h -l help -d "show this help message and exit"

# spack gpg untrust
set -g __fish_spack_optspecs_spack_gpg_untrust "h/help" "signing"
# 0 -> keys None (remove keys from the trust store): '+'
complete -c spack -n "__fish_spack_using_command_pos 0 gpg untrust" -f -a "(__fish_spack_gpg_keys)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command gpg untrust" -s h -l help -d "show this help message and exit"
# ['--signing'] -> 'signing': 0
complete -c spack -n "__fish_spack_using_command gpg untrust" -l signing -d "allow untrusting signing keys"

# spack gpg sign
set -g __fish_spack_optspecs_spack_gpg_sign "h/help" "output=" "key=" "clearsign"
# 0 -> installed_spec None (installed package spec): '...'
complete -c spack -n "__fish_spack_using_command gpg sign" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command gpg sign" -s h -l help -d "show this help message and exit"
# ['--output'] -> 'output': None
complete -c spack -n "__fish_spack_using_command gpg sign" -l output -r -f -a "(__fish_complete_directories)"
complete -c spack -n "__fish_spack_using_command gpg sign" -l output -r -d "the directory to place signatures"
# ['--key'] -> 'key': None
complete -c spack -n "__fish_spack_using_command gpg sign" -l key -r -f -a "(__fish_spack_gpg_keys)"
complete -c spack -n "__fish_spack_using_command gpg sign" -l key -r -d "the key to use for signing"
# ['--clearsign'] -> 'clearsign': 0
complete -c spack -n "__fish_spack_using_command gpg sign" -l clearsign -d "if specified, create a clearsign signature"

# spack gpg create
set -g __fish_spack_optspecs_spack_gpg_create "h/help" "comment=" "expires=" "export=" "export-secret="
# 0 -> name None (the name to use for the new key): None
# 1 -> email None (the email address to use for the new key): None
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command gpg create" -s h -l help -d "show this help message and exit"
# ['--comment'] -> 'comment': None
complete -c spack -n "__fish_spack_using_command gpg create" -l comment -r -f
complete -c spack -n "__fish_spack_using_command gpg create" -l comment -r -d "a description for the intended use of the key"
# ['--expires'] -> 'expires': None
complete -c spack -n "__fish_spack_using_command gpg create" -l expires -r -d "when the key should expire"
# ['--export'] -> 'export': None
complete -c spack -n "__fish_spack_using_command gpg create" -l export -r -d "export the public key to a file"
# ['--export-secret'] -> 'secret': None
complete -c spack -n "__fish_spack_using_command gpg create" -l export-secret -r -d "export the private key to a file."

# spack gpg list
set -g __fish_spack_optspecs_spack_gpg_list "h/help" "trusted" "signing"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command gpg list" -s h -l help -d "show this help message and exit"
# ['--trusted'] -> 'trusted': 0
complete -c spack -n "__fish_spack_using_command gpg list" -l trusted -d "list trusted keys"
# ['--signing'] -> 'signing': 0
complete -c spack -n "__fish_spack_using_command gpg list" -l signing -d "list keys which may be used for signing"

# spack gpg init
set -g __fish_spack_optspecs_spack_gpg_init "h/help" "from="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command gpg init" -s h -l help -d "show this help message and exit"
# ['--from'] -> 'import_dir': None
complete -c spack -n "__fish_spack_using_command gpg init" -l from -r -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command gpg init" -l from -r -d "==SUPPRESS=="

# spack gpg export
set -g __fish_spack_optspecs_spack_gpg_export "h/help" "secret"
# 0 -> location None (where to export keys): None
# 1 -> keys None (the keys to export; all public keys if unspecified): '*'
complete -c spack -n "__fish_spack_using_command_pos 1 gpg export" -f -a "(__fish_spack_gpg_keys)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command gpg export" -s h -l help -d "show this help message and exit"
# ['--secret'] -> 'secret': 0
complete -c spack -n "__fish_spack_using_command gpg export" -l secret -d "export secret keys"

# spack gpg publish
set -g __fish_spack_optspecs_spack_gpg_publish "h/help" "d/directory=" "m/mirror-name=" "mirror-url=" "rebuild-index"
# 0 -> keys None (the keys to publish; all public keys if unspecified): '*'
complete -c spack -n "__fish_spack_using_command_pos 0 gpg publish" -f -a "(__fish_spack_gpg_keys)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command gpg publish" -s h -l help -d "show this help message and exit"
# ['-d', '--directory'] -> 'directory': None
complete -c spack -n "__fish_spack_using_command gpg publish" -s d -l directory -r -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command gpg publish" -s d -l directory -r -d "local directory where keys will be published."
# ['-m', '--mirror-name'] -> 'mirror_name': None
complete -c spack -n "__fish_spack_using_command gpg publish" -s m -l mirror-name -r -f -a "(__fish_spack_mirrors)"
complete -c spack -n "__fish_spack_using_command gpg publish" -s m -l mirror-name -r -d "name of the mirror where keys will be published."
# ['--mirror-url'] -> 'mirror_url': None
complete -c spack -n "__fish_spack_using_command gpg publish" -l mirror-url -r -d "URL of the mirror where keys will be published."
# ['--rebuild-index'] -> 'rebuild_index': 0
complete -c spack -n "__fish_spack_using_command gpg publish" -l rebuild-index -d "Regenerate buildcache key index after publishing key(s)"

# spack graph
set -g __fish_spack_optspecs_spack_graph "h/help" "a/ascii" "d/dot" "s/static" "i/installed" "deptype="
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command graph" -f -k -a "(__fish_spack_specs_or_id)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command graph" -s h -l help -d "show this help message and exit"
# ['-a', '--ascii'] -> 'ascii': 0
complete -c spack -n "__fish_spack_using_command graph" -s a -l ascii -d "draw graph as ascii to stdout (default)"
# ['-d', '--dot'] -> 'dot': 0
complete -c spack -n "__fish_spack_using_command graph" -s d -l dot -d "generate graph in dot format and print to stdout"
# ['-s', '--static'] -> 'static': 0
complete -c spack -n "__fish_spack_using_command graph" -s s -l static -d "graph static (possible) deps, don't concretize (implies --dot)"
# ['-i', '--installed'] -> 'installed': 0
complete -c spack -n "__fish_spack_using_command graph" -s i -l installed -d "graph installed specs, or specs in the active env (implies --dot)"
# ['--deptype'] -> 'deptype': None
complete -c spack -n "__fish_spack_using_command graph" -l deptype -r -d "comma-separated list of deptypes to traverse default=build,link,run,test"

# spack help
set -g __fish_spack_optspecs_spack_help "h/help" "a/all" "spec"
# 0 -> help_command None (command to get help on): '?'
complete -c spack -n "__fish_spack_using_command_pos 0 help" -f -a "(__fish_spack_commands)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command help" -s h -l help -d "show this help message and exit"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command help" -s a -l all -d "list all available commands and options"
# ['--spec'] -> 'guide': 0
complete -c spack -n "__fish_spack_using_command help" -l spec -d "help on the package specification syntax"

# spack info
set -g __fish_spack_optspecs_spack_info "h/help"
# 0 -> package None (package name): None
complete -c spack -n "__fish_spack_using_command_pos 0 info" -f -a "(__fish_spack_packages)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command info" -s h -l help -d "show this help message and exit"

# spack install
set -g __fish_spack_optspecs_spack_install "h/help" "only=" "u/until=" "j/jobs=" "overwrite" "fail-fast" "keep-prefix" "keep-stage" "dont-restage" "use-cache" "no-cache" "cache-only" "monitor" "monitor-save-local" "monitor-tags=" "monitor-keep-going" "monitor-host=" "monitor-prefix=" "include-build-deps" "no-check-signature" "require-full-hash-match" "show-log-on-error" "source" "n/no-checksum" "deprecated" "v/verbose" "fake" "only-concrete" "no-add" "f/file=" "clean" "dirty" "test=" "run-tests" "log-format=" "log-file=" "help-cdash" "cdash-upload-url=" "cdash-build=" "cdash-site=" "cdash-track=" "cdash-buildstamp=" "y/yes-to-all" "U/fresh" "reuse"
# 0 -> spec None (package spec): '...'
complete -c spack -n "__fish_spack_using_command install" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command install" -s h -l help -d "show this help message and exit"
# ['--only'] -> ['package', 'dependencies']: None
complete -c spack -n "__fish_spack_using_command install" -l only -r -f -a "package dependencies"
complete -c spack -n "__fish_spack_using_command install" -l only -r -d "select the mode of installation. the default is to install the package along with all its dependencies. alternatively one can decide to install only the package or only the dependencies"
# ['-u', '--until'] -> 'until': None
complete -c spack -n "__fish_spack_using_command install" -s u -l until -r -d "phase to stop after when installing (default None)"
# ['-j', '--jobs'] -> 'jobs': None
complete -c spack -n "__fish_spack_using_command install" -s j -l jobs -r -d "explicitly set number of parallel jobs"
# ['--overwrite'] -> 'overwrite': 0
complete -c spack -n "__fish_spack_using_command install" -l overwrite -d "reinstall an existing spec, even if it has dependents"
# ['--fail-fast'] -> 'fail_fast': 0
complete -c spack -n "__fish_spack_using_command install" -l fail-fast -d "stop all builds if any build fails (default is best effort)"
# ['--keep-prefix'] -> 'keep_prefix': 0
complete -c spack -n "__fish_spack_using_command install" -l keep-prefix -d "don't remove the install prefix if installation fails"
# ['--keep-stage'] -> 'keep_stage': 0
complete -c spack -n "__fish_spack_using_command install" -l keep-stage -d "don't remove the build stage if installation succeeds"
# ['--dont-restage'] -> 'dont_restage': 0
complete -c spack -n "__fish_spack_using_command install" -l dont-restage -d "if a partial install is detected, don't delete prior state"
# ['--use-cache'] -> 'use_cache': 0
complete -c spack -n "__fish_spack_using_command install" -l use-cache -d "check for pre-built Spack packages in mirrors (default)"
# ['--no-cache'] -> 'use_cache': 0
complete -c spack -n "__fish_spack_using_command install" -l no-cache -d "do not check for pre-built Spack packages in mirrors"
# ['--cache-only'] -> 'cache_only': 0
complete -c spack -n "__fish_spack_using_command install" -l cache-only -d "only install package from binary mirrors"
# ['--monitor'] -> 'use_monitor': 0
complete -c spack -n "__fish_spack_using_command install" -l monitor -d "interact with a monitor server during builds."
# ['--monitor-save-local'] -> 'monitor_save_local': 0
complete -c spack -n "__fish_spack_using_command install" -l monitor-save-local -d "save monitor results to .spack instead of server."
# ['--monitor-tags'] -> 'monitor_tags': None
complete -c spack -n "__fish_spack_using_command install" -l monitor-tags -r -d "One or more (comma separated) tags for a build."
# ['--monitor-keep-going'] -> 'monitor_keep_going': 0
complete -c spack -n "__fish_spack_using_command install" -l monitor-keep-going -d "continue the build if a request to monitor fails."
# ['--monitor-host'] -> 'monitor_host': None
complete -c spack -n "__fish_spack_using_command install" -l monitor-host -r -d "If using a monitor, customize the host."
# ['--monitor-prefix'] -> 'monitor_prefix': None
complete -c spack -n "__fish_spack_using_command install" -l monitor-prefix -r -d "The API prefix for the monitor service."
# ['--include-build-deps'] -> 'include_build_deps': 0
complete -c spack -n "__fish_spack_using_command install" -l include-build-deps -d "include build deps when installing from cache, which is useful for CI pipeline troubleshooting"
# ['--no-check-signature'] -> 'unsigned': 0
complete -c spack -n "__fish_spack_using_command install" -l no-check-signature -d "do not check signatures of binary packages"
# ['--require-full-hash-match'] -> 'full_hash_match': 0
complete -c spack -n "__fish_spack_using_command install" -l require-full-hash-match -d "when installing from binary mirrors, do not install binary package unless the full hash of the remote spec matches that of the local spec"
# ['--show-log-on-error'] -> 'show_log_on_error': 0
complete -c spack -n "__fish_spack_using_command install" -l show-log-on-error -d "print full build log to stderr if build fails"
# ['--source'] -> 'install_source': 0
complete -c spack -n "__fish_spack_using_command install" -l source -d "install source files in prefix"
# ['-n', '--no-checksum'] -> 'no_checksum': 0
complete -c spack -n "__fish_spack_using_command install" -s n -l no-checksum -d "do not use checksums to verify downloaded files (unsafe)"
# ['--deprecated'] -> 'deprecated': 0
complete -c spack -n "__fish_spack_using_command install" -l deprecated -d "fetch deprecated versions without warning"
# ['-v', '--verbose'] -> 'install_verbose': 0
complete -c spack -n "__fish_spack_using_command install" -s v -l verbose -d "display verbose build output while installing"
# ['--fake'] -> 'fake': 0
complete -c spack -n "__fish_spack_using_command install" -l fake -d "fake install for debug purposes."
# ['--only-concrete'] -> 'only_concrete': 0
complete -c spack -n "__fish_spack_using_command install" -l only-concrete -d "(with environment) only install already concretized specs"
# ['--no-add'] -> 'no_add': 0
complete -c spack -n "__fish_spack_using_command install" -l no-add -d "(with environment) only install specs provided as argument if they are already in the concretized environment"
# ['-f', '--file'] -> 'specfiles': None
complete -c spack -n "__fish_spack_using_command install" -s f -l file -r -f -a "(__fish_spack_yamls)"
complete -c spack -n "__fish_spack_using_command install" -s f -l file -r -d "install from file. Read specs to install from .yaml files"
# ['--clean'] -> 'dirty': 0
complete -c spack -n "__fish_spack_using_command install" -l clean -d "unset harmful variables in the build environment (default)"
# ['--dirty'] -> 'dirty': 0
complete -c spack -n "__fish_spack_using_command install" -l dirty -d "preserve user environment in spack's build environment (danger!)"
# ['--test'] -> ['root', 'all']: None
complete -c spack -n "__fish_spack_using_command install" -l test -r -f -a "root all"
complete -c spack -n "__fish_spack_using_command install" -l test -r -d "If 'root' is chosen, run package tests during installation for top-level packages (but skip tests for dependencies). if 'all' is chosen, run package tests during installation for all packages. If neither are chosen, don't run tests for any packages."
# ['--run-tests'] -> 'run_tests': 0
complete -c spack -n "__fish_spack_using_command install" -l run-tests -d "run package tests during installation (same as --test=all)"
# ['--log-format'] -> ['None', 'junit', 'cdash']: None
complete -c spack -n "__fish_spack_using_command install" -l log-format -r -f -a "None junit cdash"
complete -c spack -n "__fish_spack_using_command install" -l log-format -r -d "format to be used for log files"
# ['--log-file'] -> 'log_file': None
complete -c spack -n "__fish_spack_using_command install" -l log-file -r -d "filename for the log file. if not passed a default will be used"
# ['--help-cdash'] -> 'help_cdash': 0
complete -c spack -n "__fish_spack_using_command install" -l help-cdash -d "Show usage instructions for CDash reporting"
# ['--cdash-upload-url'] -> 'cdash_upload_url': None
complete -c spack -n "__fish_spack_using_command install" -l cdash-upload-url -r -d "==SUPPRESS=="
# ['--cdash-build'] -> 'cdash_build': None
complete -c spack -n "__fish_spack_using_command install" -l cdash-build -r -d "==SUPPRESS=="
# ['--cdash-site'] -> 'cdash_site': None
complete -c spack -n "__fish_spack_using_command install" -l cdash-site -r -d "==SUPPRESS=="
# ['--cdash-track'] -> 'cdash_track': None
complete -c spack -n "__fish_spack_using_command install" -l cdash-track -r -d "==SUPPRESS=="
# ['--cdash-buildstamp'] -> 'cdash_buildstamp': None
complete -c spack -n "__fish_spack_using_command install" -l cdash-buildstamp -r -d "==SUPPRESS=="
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command install" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"
# ['-U', '--fresh'] -> 'concretizer_reuse': 0
complete -c spack -n "__fish_spack_using_command install" -s U -l fresh -d "do not reuse installed deps; build newest configuration"
# ['--reuse'] -> 'concretizer_reuse': 0
complete -c spack -n "__fish_spack_using_command install" -l reuse -d "reuse installed dependencies/buildcaches when possible"

# spack license
set -g __fish_spack_optspecs_spack_license "h/help" "root="
complete -c spack -n "__fish_spack_using_command_pos 0 license" -f -a list-files -d "list files in spack that should have license headers"
complete -c spack -n "__fish_spack_using_command_pos 0 license" -f -a verify -d "verify that files in spack have the right license header"
complete -c spack -n "__fish_spack_using_command_pos 0 license" -f -a update-copyright-year -d "update copyright for the current year in all licensed files"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command license" -s h -l help -d "show this help message and exit"
# ['--root'] -> 'root': None
complete -c spack -n "__fish_spack_using_command license" -l root -r -d "scan a different prefix for license issues"

# spack license list-files
set -g __fish_spack_optspecs_spack_license_list_files "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command license list-files" -s h -l help -d "show this help message and exit"

# spack license verify
set -g __fish_spack_optspecs_spack_license_verify "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command license verify" -s h -l help -d "show this help message and exit"

# spack license update-copyright-year
set -g __fish_spack_optspecs_spack_license_update_copyright_year "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command license update-copyright-year" -s h -l help -d "show this help message and exit"

# spack list
set -g __fish_spack_optspecs_spack_list "h/help" "d/search-description" "format=" "update=" "v/virtuals"
# 0 -> filter None (optional case-insensitive glob patterns to filter results): '...'
complete -c spack -n "__fish_spack_using_command list" -f -a "(__fish_spack_packages)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command list" -s h -l help -d "show this help message and exit"
# ['-d', '--search-description'] -> 'search_description': 0
complete -c spack -n "__fish_spack_using_command list" -s d -l search-description -d "filtering will also search the description for a match"
# ['--format'] -> ['name_only', 'version_json', 'html']: None
complete -c spack -n "__fish_spack_using_command list" -l format -r -f -a "name_only version_json html"
complete -c spack -n "__fish_spack_using_command list" -l format -r -d "format to be used to print the output [default: name_only]"
# ['--update'] -> 'update': None
complete -c spack -n "__fish_spack_using_command list" -l update -r -d "write output to the specified file, if any package is newer"
# ['-v', '--virtuals'] -> 'virtuals': 0
complete -c spack -n "__fish_spack_using_command list" -s v -l virtuals -d "include virtual packages in list"

# spack load
set -g __fish_spack_optspecs_spack_load "h/help" "sh" "csh" "fish" "bat" "first" "only=" "list"
# 0 -> installed_specs None (constraint to select a subset of installed packages): '...'
complete -c spack -n "__fish_spack_using_command load" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command load" -s h -l help -d "show this help message and exit"
# ['--sh'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command load" -l sh -d "print sh commands to load the package"
# ['--csh'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command load" -l csh -d "print csh commands to load the package"
# ['--fish'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command load" -l fish -d "print fish commands to load the package"
# ['--bat'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command load" -l bat -d "print bat commands to load the package"
# ['--first'] -> 'load_first': 0
complete -c spack -n "__fish_spack_using_command load" -l first -d "load the first match if multiple packages match the spec"
# ['--only'] -> ['package', 'dependencies']: None
complete -c spack -n "__fish_spack_using_command load" -l only -r -f -a "package dependencies"
complete -c spack -n "__fish_spack_using_command load" -l only -r -d "select whether to load the package and its dependencies the default is to load the package and all dependencies alternatively one can decide to load only the package or only the dependencies"
# ['--list'] -> 'list': 0
complete -c spack -n "__fish_spack_using_command load" -l list -d "show loaded packages: same as `spack find --loaded`"

# spack location
set -g __fish_spack_optspecs_spack_location "h/help" "m/module-dir" "r/spack-root" "i/install-dir" "p/package-dir" "P/packages" "s/stage-dir" "S/stages" "source-dir" "b/build-dir" "e/env="
# 0 -> spec None (package spec): '...'
complete -c spack -n "__fish_spack_using_command location" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command location" -s h -l help -d "show this help message and exit"
# ['-m', '--module-dir'] -> 'module_dir': 0
complete -c spack -n "__fish_spack_using_command location" -s m -l module-dir -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command location" -s m -l module-dir -d "spack python module directory"
# ['-r', '--spack-root'] -> 'spack_root': 0
complete -c spack -n "__fish_spack_using_command location" -s r -l spack-root -d "spack installation root"
# ['-i', '--install-dir'] -> 'install_dir': 0
complete -c spack -n "__fish_spack_using_command location" -s i -l install-dir -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command location" -s i -l install-dir -d "install prefix for spec (spec need not be installed)"
# ['-p', '--package-dir'] -> 'package_dir': 0
complete -c spack -n "__fish_spack_using_command location" -s p -l package-dir -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command location" -s p -l package-dir -d "directory enclosing a spec's package.py file"
# ['-P', '--packages'] -> 'packages': 0
complete -c spack -n "__fish_spack_using_command location" -s P -l packages -d "top-level packages directory for Spack"
# ['-s', '--stage-dir'] -> 'stage_dir': 0
complete -c spack -n "__fish_spack_using_command location" -s s -l stage-dir -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command location" -s s -l stage-dir -d "stage directory for a spec"
# ['-S', '--stages'] -> 'stages': 0
complete -c spack -n "__fish_spack_using_command location" -s S -l stages -d "top level stage directory"
# ['--source-dir'] -> 'source_dir': 0
complete -c spack -n "__fish_spack_using_command location" -l source-dir -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command location" -l source-dir -d "source directory for a spec (requires it to be staged first)"
# ['-b', '--build-dir'] -> 'build_dir': 0
complete -c spack -n "__fish_spack_using_command location" -s b -l build-dir -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command location" -s b -l build-dir -d "build directory for a spec (requires it to be staged first)"
# ['-e', '--env'] -> 'location_env': '?'
complete -c spack -n "__fish_spack_using_command location" -s e -l env -r -f -a "(__fish_complete_directories)"
complete -c spack -n "__fish_spack_using_command location" -s e -l env -r -d "location of the named or current environment"

# spack log-parse
set -g __fish_spack_optspecs_spack_log_parse "h/help" "show=" "c/context=" "p/profile" "w/width=" "j/jobs="
# 0 -> file None (a log file containing build output, or - for stdin): None
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command log-parse" -s h -l help -d "show this help message and exit"
# ['--show'] -> 'show': None
complete -c spack -n "__fish_spack_using_command log-parse" -l show -r -d "comma-separated list of what to show; options: errors, warnings"
# ['-c', '--context'] -> 'context': None
complete -c spack -n "__fish_spack_using_command log-parse" -s c -l context -r -d "lines of context to show around lines of interest"
# ['-p', '--profile'] -> 'profile': 0
complete -c spack -n "__fish_spack_using_command log-parse" -s p -l profile -d "print out a profile of time spent in regexes during parse"
# ['-w', '--width'] -> 'width': None
complete -c spack -n "__fish_spack_using_command log-parse" -s w -l width -r -d "wrap width: auto-size to terminal by default; 0 for no wrap"
# ['-j', '--jobs'] -> 'jobs': None
complete -c spack -n "__fish_spack_using_command log-parse" -s j -l jobs -r -d "number of jobs to parse log file (default: 1 for short logs, ncpus for long logs)"

# spack maintainers
set -g __fish_spack_optspecs_spack_maintainers "h/help" "maintained" "unmaintained" "a/all" "by-user"
# 0 -> package_or_user None (names of packages or users to get info for): '...'
complete -c spack -n "__fish_spack_using_command maintainers" -f -a "(__fish_spack_packages)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command maintainers" -s h -l help -d "show this help message and exit"
# ['--maintained'] -> 'maintained': 0
complete -c spack -n "__fish_spack_using_command maintainers" -l maintained -d "show names of maintained packages"
# ['--unmaintained'] -> 'unmaintained': 0
complete -c spack -n "__fish_spack_using_command maintainers" -l unmaintained -d "show names of unmaintained packages"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command maintainers" -s a -l all -d "show maintainers for all packages"
# ['--by-user'] -> 'by_user': 0
complete -c spack -n "__fish_spack_using_command maintainers" -l by-user -d "show packages for users instead of users for packages"

# spack make-installer
set -g __fish_spack_optspecs_spack_make_installer "h/help" "v/spack-version=" "s/spack-source=" "g/git-installer-verbosity="
# 0 -> output_dir None (output directory): None
complete -c spack -n "__fish_spack_using_command_pos 0 make-installer" -f -a "(__fish_spack_environments)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command make-installer" -s h -l help -d "show this help message and exit"
# ['-v', '--spack-version'] -> 'spack_version': None
complete -c spack -n "__fish_spack_using_command make-installer" -s v -l spack-version -r -d "download given spack version e.g. 0.16.0"
# ['-s', '--spack-source'] -> 'spack_source': None
complete -c spack -n "__fish_spack_using_command make-installer" -s s -l spack-source -r -d "full path to spack source"
# ['-g', '--git-installer-verbosity'] -> ['VERYSILENT', 'SILENT']: None
complete -c spack -n "__fish_spack_using_command make-installer" -s g -l git-installer-verbosity -r -f -a "VERYSILENT SILENT"
complete -c spack -n "__fish_spack_using_command make-installer" -s g -l git-installer-verbosity -r -d "Level of verbosity provided by bundled Git Installer.             Default is fully verbose"

# spack mark
set -g __fish_spack_optspecs_spack_mark "h/help" "a/all" "e/explicit" "i/implicit"
# 0 -> installed_specs None (one or more installed package specs): '...'
complete -c spack -n "__fish_spack_using_command mark" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command mark" -s h -l help -d "show this help message and exit"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command mark" -s a -l all -d "Mark ALL installed packages that match each supplied spec. If you `mark --all libelf`, ALL versions of `libelf` are marked. If no spec is supplied, all installed packages will be marked."
# ['-e', '--explicit'] -> 'explicit': 0
complete -c spack -n "__fish_spack_using_command mark" -s e -l explicit -d "Mark packages as explicitly installed."
# ['-i', '--implicit'] -> 'implicit': 0
complete -c spack -n "__fish_spack_using_command mark" -s i -l implicit -d "Mark packages as implicitly installed."

# spack mirror
set -g __fish_spack_optspecs_spack_mirror "h/help" "n/no-checksum" "deprecated"
complete -c spack -n "__fish_spack_using_command_pos 0 mirror" -f -a create -d "Create a directory to be used as a spack mirror, and fill it with"
complete -c spack -n "__fish_spack_using_command_pos 0 mirror" -f -a destroy -d "Given a url, recursively delete everything under it."
complete -c spack -n "__fish_spack_using_command_pos 0 mirror" -f -a add -d "Add a mirror to Spack."
complete -c spack -n "__fish_spack_using_command_pos 0 mirror" -f -a remove -d "Remove a mirror by name."
complete -c spack -n "__fish_spack_using_command_pos 0 mirror" -f -a rm -d "Remove a mirror by name."
complete -c spack -n "__fish_spack_using_command_pos 0 mirror" -f -a set-url -d "Change the URL of a mirror."
complete -c spack -n "__fish_spack_using_command_pos 0 mirror" -f -a list -d "Print out available mirrors to the console."
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command mirror" -s h -l help -d "show this help message and exit"
# ['-n', '--no-checksum'] -> 'no_checksum': 0
complete -c spack -n "__fish_spack_using_command mirror" -s n -l no-checksum -d "do not use checksums to verify downloaded files (unsafe)"
# ['--deprecated'] -> 'deprecated': 0
complete -c spack -n "__fish_spack_using_command mirror" -l deprecated -d "fetch deprecated versions without warning"

# spack mirror create
set -g __fish_spack_optspecs_spack_mirror_create "h/help" "d/directory=" "a/all" "f/file=" "exclude-file=" "exclude-specs=" "skip-unstable-versions" "D/dependencies" "n/versions-per-spec="
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command mirror create" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command mirror create" -s h -l help -d "show this help message and exit"
# ['-d', '--directory'] -> 'directory': None
complete -c spack -n "__fish_spack_using_command mirror create" -s d -l directory -r -f -a "(__fish_spack_environments)"
complete -c spack -n "__fish_spack_using_command mirror create" -s d -l directory -r -d "directory in which to create mirror"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command mirror create" -s a -l all -d "mirror all versions of all packages in Spack, or all packages in the current environment if there is an active environment (this requires significant time and space)"
# ['-f', '--file'] -> 'file': None
complete -c spack -n "__fish_spack_using_command mirror create" -s f -l file -r -d "file with specs of packages to put in mirror"
# ['--exclude-file'] -> 'exclude_file': None
complete -c spack -n "__fish_spack_using_command mirror create" -l exclude-file -r -d "specs which Spack should not try to add to a mirror (listed in a file, one per line)"
# ['--exclude-specs'] -> 'exclude_specs': None
complete -c spack -n "__fish_spack_using_command mirror create" -l exclude-specs -r -d "specs which Spack should not try to add to a mirror (specified on command line)"
# ['--skip-unstable-versions'] -> 'skip_unstable_versions': 0
complete -c spack -n "__fish_spack_using_command mirror create" -l skip-unstable-versions -d "don't cache versions unless they identify a stable (unchanging) source code"
# ['-D', '--dependencies'] -> 'dependencies': 0
complete -c spack -n "__fish_spack_using_command mirror create" -s D -l dependencies -d "also fetch all dependencies"
# ['-n', '--versions-per-spec'] -> 'versions_per_spec': None
complete -c spack -n "__fish_spack_using_command mirror create" -s n -l versions-per-spec -r -d "the number of versions to fetch for each spec, choose 'all' to retrieve all versions of each package"

# spack mirror destroy
set -g __fish_spack_optspecs_spack_mirror_destroy "h/help" "m/mirror-name=" "mirror-url="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command mirror destroy" -s h -l help -d "show this help message and exit"
# ['-m', '--mirror-name'] -> 'mirror_name': None
complete -c spack -n "__fish_spack_using_command mirror destroy" -s m -l mirror-name -r -f -a "(__fish_spack_mirrors)"
complete -c spack -n "__fish_spack_using_command mirror destroy" -s m -l mirror-name -r -d "find mirror to destroy by name"
# ['--mirror-url'] -> 'mirror_url': None
complete -c spack -n "__fish_spack_using_command mirror destroy" -l mirror-url -r -d "find mirror to destroy by url"

# spack mirror add
set -g __fish_spack_optspecs_spack_mirror_add "h/help" "scope=" "s3-access-key-id=" "s3-access-key-secret=" "s3-access-token=" "s3-profile=" "s3-endpoint-url="
# 0 -> mirror None (mnemonic name for mirror): None
complete -c spack -n "__fish_spack_using_command_pos 0 mirror add" -f
# 1 -> url None (url of mirror directory from 'spack mirror create'): None
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command mirror add" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command mirror add" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command mirror add" -l scope -r -d "configuration scope to modify"
# ['--s3-access-key-id'] -> 's3_access_key_id': None
complete -c spack -n "__fish_spack_using_command mirror add" -l s3-access-key-id -r -d "ID string to use to connect to this S3 mirror"
# ['--s3-access-key-secret'] -> 's3_access_key_secret': None
complete -c spack -n "__fish_spack_using_command mirror add" -l s3-access-key-secret -r -d "Secret string to use to connect to this S3 mirror"
# ['--s3-access-token'] -> 's3_access_token': None
complete -c spack -n "__fish_spack_using_command mirror add" -l s3-access-token -r -d "Access Token to use to connect to this S3 mirror"
# ['--s3-profile'] -> 's3_profile': None
complete -c spack -n "__fish_spack_using_command mirror add" -l s3-profile -r -d "S3 profile name to use to connect to this S3 mirror"
# ['--s3-endpoint-url'] -> 's3_endpoint_url': None
complete -c spack -n "__fish_spack_using_command mirror add" -l s3-endpoint-url -r -d "Access Token to use to connect to this S3 mirror"

# spack mirror remove
set -g __fish_spack_optspecs_spack_mirror_remove "h/help" "scope="
# 0 -> mirror None (mnemonic name for mirror): None
complete -c spack -n "__fish_spack_using_command_pos 0 mirror remove" -f -a "(__fish_spack_mirrors)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command mirror remove" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command mirror remove" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command mirror remove" -l scope -r -d "configuration scope to modify"

# spack mirror rm
set -g __fish_spack_optspecs_spack_mirror_rm "h/help" "scope="
# 0 -> mirror None (mnemonic name for mirror): None
complete -c spack -n "__fish_spack_using_command_pos 0 mirror rm" -f -a "(__fish_spack_mirrors)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command mirror rm" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command mirror rm" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command mirror rm" -l scope -r -d "configuration scope to modify"

# spack mirror set-url
set -g __fish_spack_optspecs_spack_mirror_set_url "h/help" "push" "scope=" "s3-access-key-id=" "s3-access-key-secret=" "s3-access-token=" "s3-profile=" "s3-endpoint-url="
# 0 -> mirror None (mnemonic name for mirror): None
complete -c spack -n "__fish_spack_using_command_pos 0 mirror set-url" -f -a "(__fish_spack_mirrors)"
# 1 -> url None (url of mirror directory from 'spack mirror create'): None
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command mirror set-url" -s h -l help -d "show this help message and exit"
# ['--push'] -> 'push': 0
complete -c spack -n "__fish_spack_using_command mirror set-url" -l push -d "set only the URL used for uploading new packages"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command mirror set-url" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command mirror set-url" -l scope -r -d "configuration scope to modify"
# ['--s3-access-key-id'] -> 's3_access_key_id': None
complete -c spack -n "__fish_spack_using_command mirror set-url" -l s3-access-key-id -r -d "ID string to use to connect to this S3 mirror"
# ['--s3-access-key-secret'] -> 's3_access_key_secret': None
complete -c spack -n "__fish_spack_using_command mirror set-url" -l s3-access-key-secret -r -d "Secret string to use to connect to this S3 mirror"
# ['--s3-access-token'] -> 's3_access_token': None
complete -c spack -n "__fish_spack_using_command mirror set-url" -l s3-access-token -r -d "Access Token to use to connect to this S3 mirror"
# ['--s3-profile'] -> 's3_profile': None
complete -c spack -n "__fish_spack_using_command mirror set-url" -l s3-profile -r -d "S3 profile name to use to connect to this S3 mirror"
# ['--s3-endpoint-url'] -> 's3_endpoint_url': None
complete -c spack -n "__fish_spack_using_command mirror set-url" -l s3-endpoint-url -r -d "Access Token to use to connect to this S3 mirror"

# spack mirror list
set -g __fish_spack_optspecs_spack_mirror_list "h/help" "scope="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command mirror list" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command mirror list" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command mirror list" -l scope -r -d "configuration scope to read from"

# spack module
set -g __fish_spack_optspecs_spack_module "h/help"
complete -c spack -n "__fish_spack_using_command_pos 0 module" -f -a lmod -d "manipulate hierarchical module files"
complete -c spack -n "__fish_spack_using_command_pos 0 module" -f -a tcl -d "manipulate non-hierarchical module files"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command module" -s h -l help -d "show this help message and exit"

# spack module lmod
set -g __fish_spack_optspecs_spack_module_lmod "h/help" "n/name="
complete -c spack -n "__fish_spack_using_command_pos 0 module lmod" -f -a refresh -d "regenerate module files"
complete -c spack -n "__fish_spack_using_command_pos 0 module lmod" -f -a find -d "find module files for packages"
complete -c spack -n "__fish_spack_using_command_pos 0 module lmod" -f -a rm -d "remove module files"
complete -c spack -n "__fish_spack_using_command_pos 0 module lmod" -f -a loads -d "prompt the list of modules associated with a constraint"
complete -c spack -n "__fish_spack_using_command_pos 0 module lmod" -f -a setdefault -d "set the default module file for a package"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command module lmod" -s h -l help -d "show this help message and exit"
# ['-n', '--name'] -> 'module_set_name': None
complete -c spack -n "__fish_spack_using_command module lmod" -s n -l name -r -d "Named module set to use from modules configuration."

# spack module lmod refresh
set -g __fish_spack_optspecs_spack_module_lmod_refresh "h/help" "delete-tree" "upstream-modules" "y/yes-to-all"
# 0 -> installed_specs None (constraint to select a subset of installed packages): '...'
complete -c spack -n "__fish_spack_using_command module lmod refresh" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command module lmod refresh" -s h -l help -d "show this help message and exit"
# ['--delete-tree'] -> 'delete_tree': 0
complete -c spack -n "__fish_spack_using_command module lmod refresh" -l delete-tree -d "delete the module file tree before refresh"
# ['--upstream-modules'] -> 'upstream_modules': 0
complete -c spack -n "__fish_spack_using_command module lmod refresh" -l upstream-modules -d "generate modules for packages installed upstream"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command module lmod refresh" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"

# spack module lmod find
set -g __fish_spack_optspecs_spack_module_lmod_find "h/help" "full-path" "r/dependencies"
# 0 -> installed_specs None (constraint to select a subset of installed packages): '...'
complete -c spack -n "__fish_spack_using_command module lmod find" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command module lmod find" -s h -l help -d "show this help message and exit"
# ['--full-path'] -> 'full_path': 0
complete -c spack -n "__fish_spack_using_command module lmod find" -l full-path -d "display full path to module file"
# ['-r', '--dependencies'] -> 'recurse_dependencies': 0
complete -c spack -n "__fish_spack_using_command module lmod find" -s r -l dependencies -d "recursively traverse spec dependencies"

# spack module lmod rm
set -g __fish_spack_optspecs_spack_module_lmod_rm "h/help" "y/yes-to-all"
# 0 -> installed_specs None (constraint to select a subset of installed packages): '...'
complete -c spack -n "__fish_spack_using_command module lmod rm" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command module lmod rm" -s h -l help -d "show this help message and exit"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command module lmod rm" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"

# spack module lmod loads
set -g __fish_spack_optspecs_spack_module_lmod_loads "h/help" "input-only" "p/prefix=" "x/exclude=" "r/dependencies"
# 0 -> installed_specs None (constraint to select a subset of installed packages): '...'
complete -c spack -n "__fish_spack_using_command module lmod loads" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command module lmod loads" -s h -l help -d "show this help message and exit"
# ['--input-only'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command module lmod loads" -l input-only -d "generate input for module command (instead of a shell script)"
# ['-p', '--prefix'] -> 'prefix': None
complete -c spack -n "__fish_spack_using_command module lmod loads" -s p -l prefix -r -f -a "(__fish_complete_directories)"
complete -c spack -n "__fish_spack_using_command module lmod loads" -s p -l prefix -r -d "prepend to module names when issuing module load commands"
# ['-x', '--exclude'] -> 'exclude': None
complete -c spack -n "__fish_spack_using_command module lmod loads" -s x -l exclude -r -d "exclude package from output; may be specified multiple times"
# ['-r', '--dependencies'] -> 'recurse_dependencies': 0
complete -c spack -n "__fish_spack_using_command module lmod loads" -s r -l dependencies -d "recursively traverse spec dependencies"

# spack module lmod setdefault
set -g __fish_spack_optspecs_spack_module_lmod_setdefault "h/help"
# 0 -> installed_specs None (constraint to select a subset of installed packages): '...'
complete -c spack -n "__fish_spack_using_command module lmod setdefault" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command module lmod setdefault" -s h -l help -d "show this help message and exit"

# spack module tcl
set -g __fish_spack_optspecs_spack_module_tcl "h/help" "n/name="
complete -c spack -n "__fish_spack_using_command_pos 0 module tcl" -f -a refresh -d "regenerate module files"
complete -c spack -n "__fish_spack_using_command_pos 0 module tcl" -f -a find -d "find module files for packages"
complete -c spack -n "__fish_spack_using_command_pos 0 module tcl" -f -a rm -d "remove module files"
complete -c spack -n "__fish_spack_using_command_pos 0 module tcl" -f -a loads -d "prompt the list of modules associated with a constraint"
complete -c spack -n "__fish_spack_using_command_pos 0 module tcl" -f -a setdefault -d "set the default module file for a package"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command module tcl" -s h -l help -d "show this help message and exit"
# ['-n', '--name'] -> 'module_set_name': None
complete -c spack -n "__fish_spack_using_command module tcl" -s n -l name -r -d "Named module set to use from modules configuration."

# spack module tcl refresh
set -g __fish_spack_optspecs_spack_module_tcl_refresh "h/help" "delete-tree" "upstream-modules" "y/yes-to-all"
# 0 -> installed_specs None (constraint to select a subset of installed packages): '...'
complete -c spack -n "__fish_spack_using_command module tcl refresh" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command module tcl refresh" -s h -l help -d "show this help message and exit"
# ['--delete-tree'] -> 'delete_tree': 0
complete -c spack -n "__fish_spack_using_command module tcl refresh" -l delete-tree -d "delete the module file tree before refresh"
# ['--upstream-modules'] -> 'upstream_modules': 0
complete -c spack -n "__fish_spack_using_command module tcl refresh" -l upstream-modules -d "generate modules for packages installed upstream"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command module tcl refresh" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"

# spack module tcl find
set -g __fish_spack_optspecs_spack_module_tcl_find "h/help" "full-path" "r/dependencies"
# 0 -> installed_specs None (constraint to select a subset of installed packages): '...'
complete -c spack -n "__fish_spack_using_command module tcl find" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command module tcl find" -s h -l help -d "show this help message and exit"
# ['--full-path'] -> 'full_path': 0
complete -c spack -n "__fish_spack_using_command module tcl find" -l full-path -d "display full path to module file"
# ['-r', '--dependencies'] -> 'recurse_dependencies': 0
complete -c spack -n "__fish_spack_using_command module tcl find" -s r -l dependencies -d "recursively traverse spec dependencies"

# spack module tcl rm
set -g __fish_spack_optspecs_spack_module_tcl_rm "h/help" "y/yes-to-all"
# 0 -> installed_specs None (constraint to select a subset of installed packages): '...'
complete -c spack -n "__fish_spack_using_command module tcl rm" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command module tcl rm" -s h -l help -d "show this help message and exit"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command module tcl rm" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"

# spack module tcl loads
set -g __fish_spack_optspecs_spack_module_tcl_loads "h/help" "input-only" "p/prefix=" "x/exclude=" "r/dependencies"
# 0 -> installed_specs None (constraint to select a subset of installed packages): '...'
complete -c spack -n "__fish_spack_using_command module tcl loads" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command module tcl loads" -s h -l help -d "show this help message and exit"
# ['--input-only'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command module tcl loads" -l input-only -d "generate input for module command (instead of a shell script)"
# ['-p', '--prefix'] -> 'prefix': None
complete -c spack -n "__fish_spack_using_command module tcl loads" -s p -l prefix -r -f -a "(__fish_complete_directories)"
complete -c spack -n "__fish_spack_using_command module tcl loads" -s p -l prefix -r -d "prepend to module names when issuing module load commands"
# ['-x', '--exclude'] -> 'exclude': None
complete -c spack -n "__fish_spack_using_command module tcl loads" -s x -l exclude -r -d "exclude package from output; may be specified multiple times"
# ['-r', '--dependencies'] -> 'recurse_dependencies': 0
complete -c spack -n "__fish_spack_using_command module tcl loads" -s r -l dependencies -d "recursively traverse spec dependencies"

# spack module tcl setdefault
set -g __fish_spack_optspecs_spack_module_tcl_setdefault "h/help"
# 0 -> installed_specs None (constraint to select a subset of installed packages): '...'
complete -c spack -n "__fish_spack_using_command module tcl setdefault" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command module tcl setdefault" -s h -l help -d "show this help message and exit"

# spack monitor
set -g __fish_spack_optspecs_spack_monitor "h/help" "monitor" "monitor-save-local" "monitor-tags=" "monitor-keep-going" "monitor-host=" "monitor-prefix="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command monitor" -s h -l help -d "show this help message and exit"
# ['--monitor'] -> 'use_monitor': 0
complete -c spack -n "__fish_spack_using_command monitor" -l monitor -d "interact with a monitor server during builds."
# ['--monitor-save-local'] -> 'monitor_save_local': 0
complete -c spack -n "__fish_spack_using_command monitor" -l monitor-save-local -d "save monitor results to .spack instead of server."
# ['--monitor-tags'] -> 'monitor_tags': None
complete -c spack -n "__fish_spack_using_command monitor" -l monitor-tags -r -d "One or more (comma separated) tags for a build."
# ['--monitor-keep-going'] -> 'monitor_keep_going': 0
complete -c spack -n "__fish_spack_using_command monitor" -l monitor-keep-going -d "continue the build if a request to monitor fails."
# ['--monitor-host'] -> 'monitor_host': None
complete -c spack -n "__fish_spack_using_command monitor" -l monitor-host -r -d "If using a monitor, customize the host."
# ['--monitor-prefix'] -> 'monitor_prefix': None
complete -c spack -n "__fish_spack_using_command monitor" -l monitor-prefix -r -d "The API prefix for the monitor service."

# spack patch
set -g __fish_spack_optspecs_spack_patch "h/help" "n/no-checksum" "deprecated"
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command patch" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command patch" -s h -l help -d "show this help message and exit"
# ['-n', '--no-checksum'] -> 'no_checksum': 0
complete -c spack -n "__fish_spack_using_command patch" -s n -l no-checksum -d "do not use checksums to verify downloaded files (unsafe)"
# ['--deprecated'] -> 'deprecated': 0
complete -c spack -n "__fish_spack_using_command patch" -l deprecated -d "fetch deprecated versions without warning"

# spack pkg
set -g __fish_spack_optspecs_spack_pkg "h/help"
complete -c spack -n "__fish_spack_using_command_pos 0 pkg" -f -a add -d "add a package to the git stage with `git add`"
complete -c spack -n "__fish_spack_using_command_pos 0 pkg" -f -a list -d "list packages associated with a particular spack git revision"
complete -c spack -n "__fish_spack_using_command_pos 0 pkg" -f -a diff -d "compare packages available in two different git revisions"
complete -c spack -n "__fish_spack_using_command_pos 0 pkg" -f -a added -d "show packages added since a commit"
complete -c spack -n "__fish_spack_using_command_pos 0 pkg" -f -a changed -d "show packages changed since a commit"
complete -c spack -n "__fish_spack_using_command_pos 0 pkg" -f -a removed -d "show packages removed since a commit"
complete -c spack -n "__fish_spack_using_command_pos 0 pkg" -f -a source -d "dump source code for a package"
complete -c spack -n "__fish_spack_using_command_pos 0 pkg" -f -a hash -d "dump canonical source code hash for a package spec"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command pkg" -s h -l help -d "show this help message and exit"

# spack pkg add
set -g __fish_spack_optspecs_spack_pkg_add "h/help"
# 0 -> package None (one or more package names): '+'
complete -c spack -n "__fish_spack_using_command_pos 0 pkg add" -f -a "(__fish_spack_pkg_packages)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command pkg add" -s h -l help -d "show this help message and exit"

# spack pkg list
set -g __fish_spack_optspecs_spack_pkg_list "h/help"
# 0 -> rev None (revision to list packages for): '?'
complete -c spack -n "__fish_spack_using_command_pos 0 pkg list" -f -a "(__fish_spack_git_rev)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command pkg list" -s h -l help -d "show this help message and exit"

# spack pkg diff
set -g __fish_spack_optspecs_spack_pkg_diff "h/help"
# 0 -> rev1 None (revision to compare against): '?'
complete -c spack -n "__fish_spack_using_command_pos 0 pkg diff" -f -a "(__fish_spack_git_rev)"
# 1 -> rev2 None (revision to compare to rev1 (default is HEAD)): '?'
complete -c spack -n "__fish_spack_using_command_pos 1 pkg diff" -f -a "(__fish_spack_git_rev)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command pkg diff" -s h -l help -d "show this help message and exit"

# spack pkg added
set -g __fish_spack_optspecs_spack_pkg_added "h/help"
# 0 -> rev1 None (revision to compare against): '?'
complete -c spack -n "__fish_spack_using_command_pos 0 pkg added" -f -a "(__fish_spack_git_rev)"
# 1 -> rev2 None (revision to compare to rev1 (default is HEAD)): '?'
complete -c spack -n "__fish_spack_using_command_pos 1 pkg added" -f -a "(__fish_spack_git_rev)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command pkg added" -s h -l help -d "show this help message and exit"

# spack pkg changed
set -g __fish_spack_optspecs_spack_pkg_changed "h/help" "t/type="
# 0 -> rev1 None (revision to compare against): '?'
complete -c spack -n "__fish_spack_using_command_pos 0 pkg changed" -f -a "(__fish_spack_git_rev)"
# 1 -> rev2 None (revision to compare to rev1 (default is HEAD)): '?'
complete -c spack -n "__fish_spack_using_command_pos 1 pkg changed" -f -a "(__fish_spack_git_rev)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command pkg changed" -s h -l help -d "show this help message and exit"
# ['-t', '--type'] -> 'type': None
complete -c spack -n "__fish_spack_using_command pkg changed" -s t -l type -r -d "Types of changes to show (A: added, R: removed, C: changed); default is 'C'"

# spack pkg removed
set -g __fish_spack_optspecs_spack_pkg_removed "h/help"
# 0 -> rev1 None (revision to compare against): '?'
complete -c spack -n "__fish_spack_using_command_pos 0 pkg removed" -f -a "(__fish_spack_git_rev)"
# 1 -> rev2 None (revision to compare to rev1 (default is HEAD)): '?'
complete -c spack -n "__fish_spack_using_command_pos 1 pkg removed" -f -a "(__fish_spack_git_rev)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command pkg removed" -s h -l help -d "show this help message and exit"

# spack pkg source
set -g __fish_spack_optspecs_spack_pkg_source "h/help" "c/canonical"
# 0 -> spec None (package spec): '...'
complete -c spack -n "__fish_spack_using_command pkg source" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command pkg source" -s h -l help -d "show this help message and exit"
# ['-c', '--canonical'] -> 'canonical': 0
complete -c spack -n "__fish_spack_using_command pkg source" -s c -l canonical -d "dump canonical source as used by package hash."

# spack pkg hash
set -g __fish_spack_optspecs_spack_pkg_hash "h/help"
# 0 -> spec None (package spec): '...'
complete -c spack -n "__fish_spack_using_command pkg hash" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command pkg hash" -s h -l help -d "show this help message and exit"

# spack providers
set -g __fish_spack_optspecs_spack_providers "h/help"
# 0 -> virtual_package None (find packages that provide this virtual package): '*'
complete -c spack -n "__fish_spack_using_command_pos 0 providers" -f -a "(__fish_spack_providers)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command providers" -s h -l help -d "show this help message and exit"

# spack pydoc
set -g __fish_spack_optspecs_spack_pydoc "h/help"
# 0 -> entity None (run pydoc help on entity): None
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command pydoc" -s h -l help -d "show this help message and exit"

# spack python
set -g __fish_spack_optspecs_spack_python "h/help" "V/version" "c/=" "i/=" "m/=" "path"
# 0 -> python_args None (file to run plus arguments): '...'
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command python" -s h -l help -d "show this help message and exit"
# ['-V', '--version'] -> 'python_version': 0
complete -c spack -n "__fish_spack_using_command python" -s V -l version -d "print the Python version number and exit"
# ['-c'] -> 'python_command': None
complete -c spack -n "__fish_spack_using_command python" -s c -r -d "command to execute"
# ['-i'] -> ['python', 'ipython']: None
complete -c spack -n "__fish_spack_using_command python" -s i -r -f -a "python ipython"
complete -c spack -n "__fish_spack_using_command python" -s i -r -d "python interpreter"
# ['-m'] -> 'module': None
complete -c spack -n "__fish_spack_using_command python" -s m -r -d "run library module as a script"
# ['--path'] -> 'show_path': 0
complete -c spack -n "__fish_spack_using_command python" -l path -d "show path to python interpreter that spack uses"

# spack reindex
set -g __fish_spack_optspecs_spack_reindex "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command reindex" -s h -l help -d "show this help message and exit"

# spack remove
set -g __fish_spack_optspecs_spack_remove "h/help" "a/all" "l/list-name=" "f/force"
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command remove" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command remove" -s h -l help -d "show this help message and exit"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command remove" -s a -l all -d "remove all specs from (clear) the environment"
# ['-l', '--list-name'] -> 'list_name': None
complete -c spack -n "__fish_spack_using_command remove" -s l -l list-name -r -d "name of the list to remove specs from"
# ['-f', '--force'] -> 'force': 0
complete -c spack -n "__fish_spack_using_command remove" -s f -l force -d "remove concretized spec (if any) immediately"

# spack rm
set -g __fish_spack_optspecs_spack_rm "h/help" "a/all" "l/list-name=" "f/force"
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command rm" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command rm" -s h -l help -d "show this help message and exit"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command rm" -s a -l all -d "remove all specs from (clear) the environment"
# ['-l', '--list-name'] -> 'list_name': None
complete -c spack -n "__fish_spack_using_command rm" -s l -l list-name -r -d "name of the list to remove specs from"
# ['-f', '--force'] -> 'force': 0
complete -c spack -n "__fish_spack_using_command rm" -s f -l force -d "remove concretized spec (if any) immediately"

# spack repo
set -g __fish_spack_optspecs_spack_repo "h/help"
complete -c spack -n "__fish_spack_using_command_pos 0 repo" -f -a create -d "Create a new package repository."
complete -c spack -n "__fish_spack_using_command_pos 0 repo" -f -a list -d "Show registered repositories and their namespaces."
complete -c spack -n "__fish_spack_using_command_pos 0 repo" -f -a add -d "Add a package source to Spack's configuration."
complete -c spack -n "__fish_spack_using_command_pos 0 repo" -f -a remove -d "Remove a repository from Spack's configuration."
complete -c spack -n "__fish_spack_using_command_pos 0 repo" -f -a rm -d "Remove a repository from Spack's configuration."
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command repo" -s h -l help -d "show this help message and exit"

# spack repo create
set -g __fish_spack_optspecs_spack_repo_create "h/help"
# 0 -> directory None (directory to create the repo in): None
complete -c spack -n "__fish_spack_using_command_pos 0 repo create" -f -a "(__fish_spack_environments)"
# 1 -> namespace None (namespace to identify packages in the repository. defaults to the directory name): '?'
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command repo create" -s h -l help -d "show this help message and exit"

# spack repo list
set -g __fish_spack_optspecs_spack_repo_list "h/help" "scope="
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command repo list" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command repo list" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command repo list" -l scope -r -d "configuration scope to read from"

# spack repo add
set -g __fish_spack_optspecs_spack_repo_add "h/help" "scope="
# 0 -> path None (path to a Spack package repository directory): None
complete -c spack -n "__fish_spack_using_command_pos 0 repo add" -f -a "(__fish_complete_directories)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command repo add" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command repo add" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command repo add" -l scope -r -d "configuration scope to modify"

# spack repo remove
set -g __fish_spack_optspecs_spack_repo_remove "h/help" "scope="
# 0 -> namespace_or_path None (namespace or path of a Spack package repository): None
complete -c spack -n "__fish_spack_using_command_pos 0 repo remove" $__fish_spack_force_files -a "(__fish_spack_repos)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command repo remove" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command repo remove" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command repo remove" -l scope -r -d "configuration scope to modify"

# spack repo rm
set -g __fish_spack_optspecs_spack_repo_rm "h/help" "scope="
# 0 -> namespace_or_path None (namespace or path of a Spack package repository): None
complete -c spack -n "__fish_spack_using_command_pos 0 repo rm" $__fish_spack_force_files -a "(__fish_spack_repos)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command repo rm" -s h -l help -d "show this help message and exit"
# ['--scope'] -> ['_builtin', 'defaults', 'defaults/linux', 'system', 'system/linux', 'site', 'site/linux', 'user', 'user/linux', 'command_line']: None
complete -c spack -n "__fish_spack_using_command repo rm" -l scope -r -f -a "_builtin defaults defaults/linux system system/linux site site/linux user user/linux command_line"
complete -c spack -n "__fish_spack_using_command repo rm" -l scope -r -d "configuration scope to modify"

# spack resource
set -g __fish_spack_optspecs_spack_resource "h/help"
complete -c spack -n "__fish_spack_using_command_pos 0 resource" -f -a list -d "list all resources known to spack (currently just patches)"
complete -c spack -n "__fish_spack_using_command_pos 0 resource" -f -a show -d "show a resource, identified by its checksum"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command resource" -s h -l help -d "show this help message and exit"

# spack resource list
set -g __fish_spack_optspecs_spack_resource_list "h/help" "only-hashes"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command resource list" -s h -l help -d "show this help message and exit"
# ['--only-hashes'] -> 'only_hashes': 0
complete -c spack -n "__fish_spack_using_command resource list" -l only-hashes -d "only print sha256 hashes of resources"

# spack resource show
set -g __fish_spack_optspecs_spack_resource_show "h/help"
# 0 -> hash None (): None
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command resource show" -s h -l help -d "show this help message and exit"

# spack restage
set -g __fish_spack_optspecs_spack_restage "h/help"
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command restage" -f -k -a "(__fish_spack_specs_or_id)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command restage" -s h -l help -d "show this help message and exit"

# spack solve
set -g __fish_spack_optspecs_spack_solve "h/help" "show=" "models=" "l/long" "L/very-long" "I/install-status" "y/yaml" "j/json" "c/cover=" "N/namespaces" "t/types" "timers" "stats" "U/fresh" "reuse"
# 0 -> specs None (specs of packages): '...'
complete -c spack -n "__fish_spack_using_command solve" -f -k -a "(__fish_spack_specs_or_id)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command solve" -s h -l help -d "show this help message and exit"
# ['--show'] -> 'show': None
complete -c spack -n "__fish_spack_using_command solve" -l show -r -d "select outputs: comma-separated list of:    asp          asp program text   opt          optimization criteria for best model   output       raw clingo output   solutions    models found by asp program   all          all of the above"
# ['--models'] -> 'models': None
complete -c spack -n "__fish_spack_using_command solve" -l models -r -d "number of solutions to search (default 0 for all)"
# ['-l', '--long'] -> 'long': 0
complete -c spack -n "__fish_spack_using_command solve" -s l -l long -d "show dependency hashes as well as versions"
# ['-L', '--very-long'] -> 'very_long': 0
complete -c spack -n "__fish_spack_using_command solve" -s L -l very-long -d "show full dependency hashes as well as versions"
# ['-I', '--install-status'] -> 'install_status': 0
complete -c spack -n "__fish_spack_using_command solve" -s I -l install-status -d "show install status of packages. packages can be: installed [+], missing and needed by an installed package [-], installed in and upstream instance [^], or not installed (no annotation)"
# ['-y', '--yaml'] -> 'format': 0
complete -c spack -n "__fish_spack_using_command solve" -s y -l yaml -d "print concrete spec as yaml"
# ['-j', '--json'] -> 'format': 0
complete -c spack -n "__fish_spack_using_command solve" -s j -l json -d "print concrete spec as json"
# ['-c', '--cover'] -> ['nodes', 'edges', 'paths']: None
complete -c spack -n "__fish_spack_using_command solve" -s c -l cover -r -f -a "nodes edges paths"
complete -c spack -n "__fish_spack_using_command solve" -s c -l cover -r -d "how extensively to traverse the DAG (default: nodes)"
# ['-N', '--namespaces'] -> 'namespaces': 0
complete -c spack -n "__fish_spack_using_command solve" -s N -l namespaces -d "show fully qualified package names"
# ['-t', '--types'] -> 'types': 0
complete -c spack -n "__fish_spack_using_command solve" -s t -l types -d "show dependency types"
# ['--timers'] -> 'timers': 0
complete -c spack -n "__fish_spack_using_command solve" -l timers -d "print out timers for different solve phases"
# ['--stats'] -> 'stats': 0
complete -c spack -n "__fish_spack_using_command solve" -l stats -d "print out statistics from clingo"
# ['-U', '--fresh'] -> 'concretizer_reuse': 0
complete -c spack -n "__fish_spack_using_command solve" -s U -l fresh -d "do not reuse installed deps; build newest configuration"
# ['--reuse'] -> 'concretizer_reuse': 0
complete -c spack -n "__fish_spack_using_command solve" -l reuse -d "reuse installed dependencies/buildcaches when possible"

# spack spec
set -g __fish_spack_optspecs_spack_spec "h/help" "l/long" "L/very-long" "I/install-status" "y/yaml" "j/json" "c/cover=" "N/namespaces" "hash-type=" "t/types" "U/fresh" "reuse"
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command spec" -f -k -a "(__fish_spack_specs_or_id)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command spec" -s h -l help -d "show this help message and exit"
# ['-l', '--long'] -> 'long': 0
complete -c spack -n "__fish_spack_using_command spec" -s l -l long -d "show dependency hashes as well as versions"
# ['-L', '--very-long'] -> 'very_long': 0
complete -c spack -n "__fish_spack_using_command spec" -s L -l very-long -d "show full dependency hashes as well as versions"
# ['-I', '--install-status'] -> 'install_status': 0
complete -c spack -n "__fish_spack_using_command spec" -s I -l install-status -d "show install status of packages. packages can be: installed [+], missing and needed by an installed package [-], installed in and upstream instance [^], or not installed (no annotation)"
# ['-y', '--yaml'] -> 'format': 0
complete -c spack -n "__fish_spack_using_command spec" -s y -l yaml -d "print concrete spec as YAML"
# ['-j', '--json'] -> 'format': 0
complete -c spack -n "__fish_spack_using_command spec" -s j -l json -d "print concrete spec as JSON"
# ['-c', '--cover'] -> ['nodes', 'edges', 'paths']: None
complete -c spack -n "__fish_spack_using_command spec" -s c -l cover -r -f -a "nodes edges paths"
complete -c spack -n "__fish_spack_using_command spec" -s c -l cover -r -d "how extensively to traverse the DAG (default: nodes)"
# ['-N', '--namespaces'] -> 'namespaces': 0
complete -c spack -n "__fish_spack_using_command spec" -s N -l namespaces -d "show fully qualified package names"
# ['--hash-type'] -> ['build_hash', 'full_hash', 'dag_hash']: None
complete -c spack -n "__fish_spack_using_command spec" -l hash-type -r -f -a "build_hash full_hash dag_hash"
complete -c spack -n "__fish_spack_using_command spec" -l hash-type -r -d "generate spec with a particular hash type."
# ['-t', '--types'] -> 'types': 0
complete -c spack -n "__fish_spack_using_command spec" -s t -l types -d "show dependency types"
# ['-U', '--fresh'] -> 'concretizer_reuse': 0
complete -c spack -n "__fish_spack_using_command spec" -s U -l fresh -d "do not reuse installed deps; build newest configuration"
# ['--reuse'] -> 'concretizer_reuse': 0
complete -c spack -n "__fish_spack_using_command spec" -l reuse -d "reuse installed dependencies/buildcaches when possible"

# spack stage
set -g __fish_spack_optspecs_spack_stage "h/help" "n/no-checksum" "deprecated" "p/path="
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command stage" -f -k -a "(__fish_spack_specs_or_id)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command stage" -s h -l help -d "show this help message and exit"
# ['-n', '--no-checksum'] -> 'no_checksum': 0
complete -c spack -n "__fish_spack_using_command stage" -s n -l no-checksum -d "do not use checksums to verify downloaded files (unsafe)"
# ['--deprecated'] -> 'deprecated': 0
complete -c spack -n "__fish_spack_using_command stage" -l deprecated -d "fetch deprecated versions without warning"
# ['-p', '--path'] -> 'path': None
complete -c spack -n "__fish_spack_using_command stage" -s p -l path -r -d "path to stage package, does not add to spack tree"

# spack style
set -g __fish_spack_optspecs_spack_style "h/help" "b/base=" "a/all" "r/root-relative" "U/no-untracked" "f/fix" "no-isort" "no-flake8" "no-mypy" "black" "root="
# 0 -> files None (specific files to check): '...'
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command style" -s h -l help -d "show this help message and exit"
# ['-b', '--base'] -> 'base': None
complete -c spack -n "__fish_spack_using_command style" -s b -l base -r -d "branch to compare against to determine changed files (default: develop)"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command style" -s a -l all -d "check all files, not just changed files"
# ['-r', '--root-relative'] -> 'root_relative': 0
complete -c spack -n "__fish_spack_using_command style" -s r -l root-relative -d "print root-relative paths (default: cwd-relative)"
# ['-U', '--no-untracked'] -> 'untracked': 0
complete -c spack -n "__fish_spack_using_command style" -s U -l no-untracked -d "exclude untracked files from checks"
# ['-f', '--fix'] -> 'fix': 0
complete -c spack -n "__fish_spack_using_command style" -s f -l fix -d "format automatically if possible (e.g., with isort, black)"
# ['--no-isort'] -> 'isort': 0
complete -c spack -n "__fish_spack_using_command style" -l no-isort -d "do not run isort (default: run isort if available)"
# ['--no-flake8'] -> 'flake8': 0
complete -c spack -n "__fish_spack_using_command style" -l no-flake8 -d "do not run flake8 (default: run flake8 or fail)"
# ['--no-mypy'] -> 'mypy': 0
complete -c spack -n "__fish_spack_using_command style" -l no-mypy -d "do not run mypy (default: run mypy if available)"
# ['--black'] -> 'black': 0
complete -c spack -n "__fish_spack_using_command style" -l black -d "run black if available (default: skip black)"
# ['--root'] -> 'root': None
complete -c spack -n "__fish_spack_using_command style" -l root -r -d "style check a different spack instance"

# spack tags
set -g __fish_spack_optspecs_spack_tags "h/help" "i/installed" "a/all"
# 0 -> tag None (show packages with the specified tag): '*'
complete -c spack -n "__fish_spack_using_command_pos 0 tags" -f -a "(__fish_spack_tags)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command tags" -s h -l help -d "show this help message and exit"
# ['-i', '--installed'] -> 'installed': 0
complete -c spack -n "__fish_spack_using_command tags" -s i -l installed -d "show information for installed packages only"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command tags" -s a -l all -d "show packages for all available tags"

# spack test
set -g __fish_spack_optspecs_spack_test "h/help"
complete -c spack -n "__fish_spack_using_command_pos 0 test" -f -a run -d "Run tests for the specified installed packages."
complete -c spack -n "__fish_spack_using_command_pos 0 test" -f -a list -d "List installed packages with available tests."
complete -c spack -n "__fish_spack_using_command_pos 0 test" -f -a find -d "Find tests that are running or have available results."
complete -c spack -n "__fish_spack_using_command_pos 0 test" -f -a status -d "Get the current status for the specified Spack test suite(s)."
complete -c spack -n "__fish_spack_using_command_pos 0 test" -f -a results -d "Get the results from Spack test suite(s) (default all)."
complete -c spack -n "__fish_spack_using_command_pos 0 test" -f -a remove -d "Remove results from Spack test suite(s) (default all)."
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command test" -s h -l help -d "show this help message and exit"

# spack test run
set -g __fish_spack_optspecs_spack_test_run "h/help" "alias=" "fail-fast" "fail-first" "externals" "keep-stage" "log-format=" "log-file=" "cdash-upload-url=" "cdash-build=" "cdash-site=" "cdash-track=" "cdash-buildstamp=" "help-cdash" "clean" "dirty"
# 0 -> installed_specs None (one or more installed package specs): '...'
complete -c spack -n "__fish_spack_using_command test run" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command test run" -s h -l help -d "show this help message and exit"
# ['--alias'] -> 'alias': None
complete -c spack -n "__fish_spack_using_command test run" -l alias -r -d "Provide an alias for this test-suite for subsequent access."
# ['--fail-fast'] -> 'fail_fast': 0
complete -c spack -n "__fish_spack_using_command test run" -l fail-fast -d "Stop tests for each package after the first failure."
# ['--fail-first'] -> 'fail_first': 0
complete -c spack -n "__fish_spack_using_command test run" -l fail-first -d "Stop after the first failed package."
# ['--externals'] -> 'externals': 0
complete -c spack -n "__fish_spack_using_command test run" -l externals -d "Test packages that are externally installed."
# ['--keep-stage'] -> 'keep_stage': 0
complete -c spack -n "__fish_spack_using_command test run" -l keep-stage -d "Keep testing directory for debugging"
# ['--log-format'] -> ['None', 'junit', 'cdash']: None
complete -c spack -n "__fish_spack_using_command test run" -l log-format -r -f -a "None junit cdash"
complete -c spack -n "__fish_spack_using_command test run" -l log-format -r -d "format to be used for log files"
# ['--log-file'] -> 'log_file': None
complete -c spack -n "__fish_spack_using_command test run" -l log-file -r -d "filename for the log file. if not passed a default will be used"
# ['--cdash-upload-url'] -> 'cdash_upload_url': None
complete -c spack -n "__fish_spack_using_command test run" -l cdash-upload-url -r -d "==SUPPRESS=="
# ['--cdash-build'] -> 'cdash_build': None
complete -c spack -n "__fish_spack_using_command test run" -l cdash-build -r -d "==SUPPRESS=="
# ['--cdash-site'] -> 'cdash_site': None
complete -c spack -n "__fish_spack_using_command test run" -l cdash-site -r -d "==SUPPRESS=="
# ['--cdash-track'] -> 'cdash_track': None
complete -c spack -n "__fish_spack_using_command test run" -l cdash-track -r -d "==SUPPRESS=="
# ['--cdash-buildstamp'] -> 'cdash_buildstamp': None
complete -c spack -n "__fish_spack_using_command test run" -l cdash-buildstamp -r -d "==SUPPRESS=="
# ['--help-cdash'] -> 'help_cdash': 0
complete -c spack -n "__fish_spack_using_command test run" -l help-cdash -d "Show usage instructions for CDash reporting"
# ['--clean'] -> 'dirty': 0
complete -c spack -n "__fish_spack_using_command test run" -l clean -d "unset harmful variables in the build environment (default)"
# ['--dirty'] -> 'dirty': 0
complete -c spack -n "__fish_spack_using_command test run" -l dirty -d "preserve user environment in spack's build environment (danger!)"

# spack test list
set -g __fish_spack_optspecs_spack_test_list "h/help" "a/all"
# 0 -> tag None (limit packages to those with all listed tags): '*'
complete -c spack -n "__fish_spack_using_command_pos 0 test list" -f -a "(__fish_spack_tags)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command test list" -s h -l help -d "show this help message and exit"
# ['-a', '--all'] -> 'list_all': 0
complete -c spack -n "__fish_spack_using_command test list" -s a -l all -d "list all packages with tests (not just installed)"

# spack test find
set -g __fish_spack_optspecs_spack_test_find "h/help"
# 0 -> filter None (optional case-insensitive glob patterns to filter results.): '...'
complete -c spack -n "__fish_spack_using_command test find" -f -a "(__fish_spack_tests)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command test find" -s h -l help -d "show this help message and exit"

# spack test status
set -g __fish_spack_optspecs_spack_test_status "h/help"
# 0 -> names None (Test suites for which to print status): '...'
complete -c spack -n "__fish_spack_using_command test status" -f -a "(__fish_spack_tests)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command test status" -s h -l help -d "show this help message and exit"

# spack test results
set -g __fish_spack_optspecs_spack_test_results "h/help" "l/logs" "f/failed"
# 0 -> [name(s)] [-- installed_specs]... None (suite names and installed package constraints): '...'
complete -c spack -n "__fish_spack_using_command test results" -f -a "(__fish_spack_tests)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command test results" -s h -l help -d "show this help message and exit"
# ['-l', '--logs'] -> 'logs': 0
complete -c spack -n "__fish_spack_using_command test results" -s l -l logs -d "print the test log for each matching package"
# ['-f', '--failed'] -> 'failed': 0
complete -c spack -n "__fish_spack_using_command test results" -s f -l failed -d "only show results for failed tests of matching packages"

# spack test remove
set -g __fish_spack_optspecs_spack_test_remove "h/help" "y/yes-to-all"
# 0 -> names None (Test suites to remove from test stage): '...'
complete -c spack -n "__fish_spack_using_command test remove" -f -a "(__fish_spack_tests)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command test remove" -s h -l help -d "show this help message and exit"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command test remove" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"

# spack test-env
set -g __fish_spack_optspecs_spack_test_env "h/help" "clean" "dirty" "dump=" "pickle="
# 0 -> spec [--] [cmd]... None (specs of package environment to emulate): '...'
complete -c spack -n "__fish_spack_using_command test-env" -f -a "(__fish_spack_build_env_spec)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command test-env" -s h -l help -d "show this help message and exit"
# ['--clean'] -> 'dirty': 0
complete -c spack -n "__fish_spack_using_command test-env" -l clean -d "unset harmful variables in the build environment (default)"
# ['--dirty'] -> 'dirty': 0
complete -c spack -n "__fish_spack_using_command test-env" -l dirty -d "preserve user environment in spack's build environment (danger!)"
# ['--dump'] -> 'dump': None
complete -c spack -n "__fish_spack_using_command test-env" -l dump -r -d "dump a source-able environment to FILE"
# ['--pickle'] -> 'pickle': None
complete -c spack -n "__fish_spack_using_command test-env" -l pickle -r -d "dump a pickled source-able environment to FILE"

# spack tutorial
set -g __fish_spack_optspecs_spack_tutorial "h/help" "y/yes-to-all"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command tutorial" -s h -l help -d "show this help message and exit"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command tutorial" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"

# spack undevelop
set -g __fish_spack_optspecs_spack_undevelop "h/help" "a/all"
# 0 -> specs None (one or more package specs): '...'
complete -c spack -n "__fish_spack_using_command undevelop" -f -k -a "(__fish_spack_specs_or_id)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command undevelop" -s h -l help -d "show this help message and exit"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command undevelop" -s a -l all -d "remove all specs from (clear) the environment"

# spack uninstall
set -g __fish_spack_optspecs_spack_uninstall "h/help" "f/force" "R/dependents" "y/yes-to-all" "a/all"
# 0 -> installed_specs None (one or more installed package specs): '...'
complete -c spack -n "__fish_spack_using_command uninstall" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command uninstall" -s h -l help -d "show this help message and exit"
# ['-f', '--force'] -> 'force': 0
complete -c spack -n "__fish_spack_using_command uninstall" -s f -l force -d "remove regardless of whether other packages or environments depend on this one"
# ['-R', '--dependents'] -> 'dependents': 0
complete -c spack -n "__fish_spack_using_command uninstall" -s R -l dependents -d "also uninstall any packages that depend on the ones given via command line"
# ['-y', '--yes-to-all'] -> 'yes_to_all': 0
complete -c spack -n "__fish_spack_using_command uninstall" -s y -l yes-to-all -d "assume "yes" is the answer to every confirmation request"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command uninstall" -s a -l all -d "remove ALL installed packages that match each supplied spec"

# spack unit-test
set -g __fish_spack_optspecs_spack_unit_test "h/help" "H/pytest-help" "l/list" "L/list-long" "N/list-names" "extension=" "s/" "k/=" "showlocals"
# 0 -> pytest_args None (arguments for pytest): '...'
complete -c spack -n "__fish_spack_using_command unit-test" -f -a "(__fish_spack_unit_tests)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command unit-test" -s h -l help -d "show this help message and exit"
# ['-H', '--pytest-help'] -> 'pytest_help': 0
complete -c spack -n "__fish_spack_using_command unit-test" -s H -l pytest-help -d "show full pytest help, with advanced options"
# ['-l', '--list'] -> 'list': 0
complete -c spack -n "__fish_spack_using_command unit-test" -s l -l list -d "list test filenames"
# ['-L', '--list-long'] -> 'list': 0
complete -c spack -n "__fish_spack_using_command unit-test" -s L -l list-long -d "list all test functions"
# ['-N', '--list-names'] -> 'list': 0
complete -c spack -n "__fish_spack_using_command unit-test" -s N -l list-names -d "list full names of all tests"
# ['--extension'] -> 'extension': None
complete -c spack -n "__fish_spack_using_command unit-test" -l extension -r -d "run test for a given spack extension"
# ['-s'] -> 'parsed_args': 0
complete -c spack -n "__fish_spack_using_command unit-test" -s s -d "print output while tests run (disable capture)"
# ['-k'] -> 'expression': None
complete -c spack -n "__fish_spack_using_command unit-test" -s k -r -d "filter tests by keyword (can also use w/list options)"
# ['--showlocals'] -> 'parsed_args': 0
complete -c spack -n "__fish_spack_using_command unit-test" -l showlocals -d "show local variable values in tracebacks"

# spack unload
set -g __fish_spack_optspecs_spack_unload "h/help" "sh" "csh" "fish" "bat" "a/all"
# 0 -> installed_specs None (one or more installed package specs): '...'
complete -c spack -n "__fish_spack_using_command unload" -f -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command unload" -s h -l help -d "show this help message and exit"
# ['--sh'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command unload" -l sh -d "print sh commands to activate the environment"
# ['--csh'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command unload" -l csh -d "print csh commands to activate the environment"
# ['--fish'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command unload" -l fish -d "print fish commands to load the package"
# ['--bat'] -> 'shell': 0
complete -c spack -n "__fish_spack_using_command unload" -l bat -d "print bat commands to load the package"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command unload" -s a -l all -d "unload all loaded Spack packages."

# spack url
set -g __fish_spack_optspecs_spack_url "h/help"
complete -c spack -n "__fish_spack_using_command_pos 0 url" -f -a parse -d "attempt to parse a url"
complete -c spack -n "__fish_spack_using_command_pos 0 url" -f -a list -d "list urls in all packages"
complete -c spack -n "__fish_spack_using_command_pos 0 url" -f -a summary -d "print a summary of how well we are parsing package urls"
complete -c spack -n "__fish_spack_using_command_pos 0 url" -f -a stats -d "print statistics on versions and checksums for all packages"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command url" -s h -l help -d "show this help message and exit"

# spack url parse
set -g __fish_spack_optspecs_spack_url_parse "h/help" "s/spider"
# 0 -> url None (url to parse): None
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command url parse" -s h -l help -d "show this help message and exit"
# ['-s', '--spider'] -> 'spider': 0
complete -c spack -n "__fish_spack_using_command url parse" -s s -l spider -d "spider the source page for versions"

# spack url list
set -g __fish_spack_optspecs_spack_url_list "h/help" "c/color" "e/extrapolation" "n/incorrect-name" "N/correct-name" "v/incorrect-version" "V/correct-version"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command url list" -s h -l help -d "show this help message and exit"
# ['-c', '--color'] -> 'color': 0
complete -c spack -n "__fish_spack_using_command url list" -s c -l color -d "color the parsed version and name in the urls shown (versions will be cyan, name red)"
# ['-e', '--extrapolation'] -> 'extrapolation': 0
complete -c spack -n "__fish_spack_using_command url list" -s e -l extrapolation -d "color the versions used for extrapolation as well (additional versions will be green, names magenta)"
# ['-n', '--incorrect-name'] -> 'incorrect_name': 0
complete -c spack -n "__fish_spack_using_command url list" -s n -l incorrect-name -d "only list urls for which the name was incorrectly parsed"
# ['-N', '--correct-name'] -> 'correct_name': 0
complete -c spack -n "__fish_spack_using_command url list" -s N -l correct-name -d "only list urls for which the name was correctly parsed"
# ['-v', '--incorrect-version'] -> 'incorrect_version': 0
complete -c spack -n "__fish_spack_using_command url list" -s v -l incorrect-version -d "only list urls for which the version was incorrectly parsed"
# ['-V', '--correct-version'] -> 'correct_version': 0
complete -c spack -n "__fish_spack_using_command url list" -s V -l correct-version -d "only list urls for which the version was correctly parsed"

# spack url summary
set -g __fish_spack_optspecs_spack_url_summary "h/help"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command url summary" -s h -l help -d "show this help message and exit"

# spack url stats
set -g __fish_spack_optspecs_spack_url_stats "h/help" "show-issues"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command url stats" -s h -l help -d "show this help message and exit"
# ['--show-issues'] -> 'show_issues': 0
complete -c spack -n "__fish_spack_using_command url stats" -l show-issues -d "show packages with issues (md5 hashes, http urls)"

# spack verify
set -g __fish_spack_optspecs_spack_verify "h/help" "l/local" "j/json" "a/all" "s/specs" "f/files"
# 0 -> specs_or_files None (Specs or files to verify): '...'
complete -c spack -n "__fish_spack_using_command verify" $__fish_spack_force_files -a "(__fish_spack_installed_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command verify" -s h -l help -d "show this help message and exit"
# ['-l', '--local'] -> 'local': 0
complete -c spack -n "__fish_spack_using_command verify" -s l -l local -d "Verify only locally installed packages"
# ['-j', '--json'] -> 'json': 0
complete -c spack -n "__fish_spack_using_command verify" -s j -l json -d "Ouptut json-formatted errors"
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command verify" -s a -l all -d "Verify all packages"
# ['-s', '--specs'] -> 'type': 0
complete -c spack -n "__fish_spack_using_command verify" -s s -l specs -d "Treat entries as specs (default)"
# ['-f', '--files'] -> 'type': 0
complete -c spack -n "__fish_spack_using_command verify" -s f -l files -d "Treat entries as absolute filenames. Cannot be used with '-a'"

# spack versions
set -g __fish_spack_optspecs_spack_versions "h/help" "s/safe" "safe-only" "r/remote" "n/new" "c/concurrency="
# 0 -> package None (package name): None
complete -c spack -n "__fish_spack_using_command_pos 0 versions" -f -a "(__fish_spack_packages)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command versions" -s h -l help -d "show this help message and exit"
# ['-s', '--safe'] -> 'safe': 0
complete -c spack -n "__fish_spack_using_command versions" -s s -l safe -d "only list safe versions of the package"
# ['--safe-only'] -> 'safe_only': 0
complete -c spack -n "__fish_spack_using_command versions" -l safe-only -d "[deprecated] only list safe versions of the package"
# ['-r', '--remote'] -> 'remote': 0
complete -c spack -n "__fish_spack_using_command versions" -s r -l remote -d "only list remote versions of the package"
# ['-n', '--new'] -> 'new': 0
complete -c spack -n "__fish_spack_using_command versions" -s n -l new -d "only list remote versions newer than the latest checksummed version"
# ['-c', '--concurrency'] -> 'concurrency': None
complete -c spack -n "__fish_spack_using_command versions" -s c -l concurrency -r -d "number of concurrent requests"

# spack view
set -g __fish_spack_optspecs_spack_view "h/help" "v/verbose" "e/exclude=" "d/dependencies="
complete -c spack -n "__fish_spack_using_command_pos 0 view" -f -a symlink -d "add package files to a filesystem view via symbolic links"
complete -c spack -n "__fish_spack_using_command_pos 0 view" -f -a add -d "add package files to a filesystem view via symbolic links"
complete -c spack -n "__fish_spack_using_command_pos 0 view" -f -a soft -d "add package files to a filesystem view via symbolic links"
complete -c spack -n "__fish_spack_using_command_pos 0 view" -f -a hardlink -d "add packages files to a filesystem view via hard links"
complete -c spack -n "__fish_spack_using_command_pos 0 view" -f -a hard -d "add packages files to a filesystem view via hard links"
complete -c spack -n "__fish_spack_using_command_pos 0 view" -f -a copy -d "add package files to a filesystem view via copy/relocate"
complete -c spack -n "__fish_spack_using_command_pos 0 view" -f -a relocate -d "add package files to a filesystem view via copy/relocate"
complete -c spack -n "__fish_spack_using_command_pos 0 view" -f -a remove -d "remove packages from a filesystem view"
complete -c spack -n "__fish_spack_using_command_pos 0 view" -f -a rm -d "remove packages from a filesystem view"
complete -c spack -n "__fish_spack_using_command_pos 0 view" -f -a statlink -d "check status of packages in a filesystem view"
complete -c spack -n "__fish_spack_using_command_pos 0 view" -f -a status -d "check status of packages in a filesystem view"
complete -c spack -n "__fish_spack_using_command_pos 0 view" -f -a check -d "check status of packages in a filesystem view"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command view" -s h -l help -d "show this help message and exit"
# ['-v', '--verbose'] -> 'verbose': 0
complete -c spack -n "__fish_spack_using_command view" -s v -l verbose -d "If not verbose only warnings/errors will be printed."
# ['-e', '--exclude'] -> 'exclude': None
complete -c spack -n "__fish_spack_using_command view" -s e -l exclude -r -d "exclude packages with names matching the given regex pattern"
# ['-d', '--dependencies'] -> ['true', 'false', 'yes', 'no']: None
complete -c spack -n "__fish_spack_using_command view" -s d -l dependencies -r -f -a "true false yes no"
complete -c spack -n "__fish_spack_using_command view" -s d -l dependencies -r -d "Link/remove/list dependencies."

# spack view symlink
set -g __fish_spack_optspecs_spack_view_symlink "h/help" "projection-file=" "i/ignore-conflicts"
# 0 -> path None (path to file system view directory): 1
complete -c spack -n "__fish_spack_using_command_pos 0 view symlink" -f -a "(__fish_complete_directories)"
# 1 -> spec None (seed specs of the packages to view): '+'
complete -c spack -n "__fish_spack_using_command_pos 1 view symlink" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command view symlink" -s h -l help -d "show this help message and exit"
# ['--projection-file'] -> 'projection_file': None
complete -c spack -n "__fish_spack_using_command view symlink" -l projection-file -r -d "Initialize view using projections from file."
# ['-i', '--ignore-conflicts'] -> 'ignore_conflicts': 0

# spack view add
set -g __fish_spack_optspecs_spack_view_add "h/help" "projection-file=" "i/ignore-conflicts"
# 0 -> path None (path to file system view directory): 1
complete -c spack -n "__fish_spack_using_command_pos 0 view add" -f -a "(__fish_complete_directories)"
# 1 -> spec None (seed specs of the packages to view): '+'
complete -c spack -n "__fish_spack_using_command_pos 1 view add" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command view add" -s h -l help -d "show this help message and exit"
# ['--projection-file'] -> 'projection_file': None
complete -c spack -n "__fish_spack_using_command view add" -l projection-file -r -d "Initialize view using projections from file."
# ['-i', '--ignore-conflicts'] -> 'ignore_conflicts': 0

# spack view soft
set -g __fish_spack_optspecs_spack_view_soft "h/help" "projection-file=" "i/ignore-conflicts"
# 0 -> path None (path to file system view directory): 1
complete -c spack -n "__fish_spack_using_command_pos 0 view soft" -f -a "(__fish_complete_directories)"
# 1 -> spec None (seed specs of the packages to view): '+'
complete -c spack -n "__fish_spack_using_command_pos 1 view soft" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command view soft" -s h -l help -d "show this help message and exit"
# ['--projection-file'] -> 'projection_file': None
complete -c spack -n "__fish_spack_using_command view soft" -l projection-file -r -d "Initialize view using projections from file."
# ['-i', '--ignore-conflicts'] -> 'ignore_conflicts': 0

# spack view hardlink
set -g __fish_spack_optspecs_spack_view_hardlink "h/help" "projection-file=" "i/ignore-conflicts"
# 0 -> path None (path to file system view directory): 1
complete -c spack -n "__fish_spack_using_command_pos 0 view hardlink" -f -a "(__fish_complete_directories)"
# 1 -> spec None (seed specs of the packages to view): '+'
complete -c spack -n "__fish_spack_using_command_pos 1 view hardlink" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command view hardlink" -s h -l help -d "show this help message and exit"
# ['--projection-file'] -> 'projection_file': None
complete -c spack -n "__fish_spack_using_command view hardlink" -l projection-file -r -d "Initialize view using projections from file."
# ['-i', '--ignore-conflicts'] -> 'ignore_conflicts': 0

# spack view hard
set -g __fish_spack_optspecs_spack_view_hard "h/help" "projection-file=" "i/ignore-conflicts"
# 0 -> path None (path to file system view directory): 1
complete -c spack -n "__fish_spack_using_command_pos 0 view hard" -f -a "(__fish_complete_directories)"
# 1 -> spec None (seed specs of the packages to view): '+'
complete -c spack -n "__fish_spack_using_command_pos 1 view hard" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command view hard" -s h -l help -d "show this help message and exit"
# ['--projection-file'] -> 'projection_file': None
complete -c spack -n "__fish_spack_using_command view hard" -l projection-file -r -d "Initialize view using projections from file."
# ['-i', '--ignore-conflicts'] -> 'ignore_conflicts': 0

# spack view copy
set -g __fish_spack_optspecs_spack_view_copy "h/help" "projection-file=" "i/ignore-conflicts"
# 0 -> path None (path to file system view directory): 1
complete -c spack -n "__fish_spack_using_command_pos 0 view copy" -f -a "(__fish_complete_directories)"
# 1 -> spec None (seed specs of the packages to view): '+'
complete -c spack -n "__fish_spack_using_command_pos 1 view copy" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command view copy" -s h -l help -d "show this help message and exit"
# ['--projection-file'] -> 'projection_file': None
complete -c spack -n "__fish_spack_using_command view copy" -l projection-file -r -d "Initialize view using projections from file."
# ['-i', '--ignore-conflicts'] -> 'ignore_conflicts': 0

# spack view relocate
set -g __fish_spack_optspecs_spack_view_relocate "h/help" "projection-file=" "i/ignore-conflicts"
# 0 -> path None (path to file system view directory): 1
complete -c spack -n "__fish_spack_using_command_pos 0 view relocate" -f -a "(__fish_complete_directories)"
# 1 -> spec None (seed specs of the packages to view): '+'
complete -c spack -n "__fish_spack_using_command_pos 1 view relocate" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command view relocate" -s h -l help -d "show this help message and exit"
# ['--projection-file'] -> 'projection_file': None
complete -c spack -n "__fish_spack_using_command view relocate" -l projection-file -r -d "Initialize view using projections from file."
# ['-i', '--ignore-conflicts'] -> 'ignore_conflicts': 0

# spack view remove
set -g __fish_spack_optspecs_spack_view_remove "h/help" "no-remove-dependents" "a/all"
# 0 -> path None (path to file system view directory): 1
complete -c spack -n "__fish_spack_using_command_pos 0 view remove" -f -a "(__fish_complete_directories)"
# 1 -> spec None (seed specs of the packages to view): '*'
complete -c spack -n "__fish_spack_using_command_pos 1 view remove" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command view remove" -s h -l help -d "show this help message and exit"
# ['--no-remove-dependents'] -> 'no_remove_dependents': 0
complete -c spack -n "__fish_spack_using_command view remove" -l no-remove-dependents -d "Do not remove dependents of specified specs."
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command view remove" -s a -l all -d "act on all specs in view"

# spack view rm
set -g __fish_spack_optspecs_spack_view_rm "h/help" "no-remove-dependents" "a/all"
# 0 -> path None (path to file system view directory): 1
complete -c spack -n "__fish_spack_using_command_pos 0 view rm" -f -a "(__fish_complete_directories)"
# 1 -> spec None (seed specs of the packages to view): '*'
complete -c spack -n "__fish_spack_using_command_pos 1 view rm" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command view rm" -s h -l help -d "show this help message and exit"
# ['--no-remove-dependents'] -> 'no_remove_dependents': 0
complete -c spack -n "__fish_spack_using_command view rm" -l no-remove-dependents -d "Do not remove dependents of specified specs."
# ['-a', '--all'] -> 'all': 0
complete -c spack -n "__fish_spack_using_command view rm" -s a -l all -d "act on all specs in view"

# spack view statlink
set -g __fish_spack_optspecs_spack_view_statlink "h/help"
# 0 -> path None (path to file system view directory): 1
complete -c spack -n "__fish_spack_using_command_pos 0 view statlink" -f -a "(__fish_complete_directories)"
# 1 -> spec None (seed specs of the packages to view): '*'
complete -c spack -n "__fish_spack_using_command_pos 1 view statlink" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command view statlink" -s h -l help -d "show this help message and exit"

# spack view status
set -g __fish_spack_optspecs_spack_view_status "h/help"
# 0 -> path None (path to file system view directory): 1
complete -c spack -n "__fish_spack_using_command_pos 0 view status" -f -a "(__fish_complete_directories)"
# 1 -> spec None (seed specs of the packages to view): '*'
complete -c spack -n "__fish_spack_using_command_pos 1 view status" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command view status" -s h -l help -d "show this help message and exit"

# spack view check
set -g __fish_spack_optspecs_spack_view_check "h/help"
# 0 -> path None (path to file system view directory): 1
complete -c spack -n "__fish_spack_using_command_pos 0 view check" -f -a "(__fish_complete_directories)"
# 1 -> spec None (seed specs of the packages to view): '*'
complete -c spack -n "__fish_spack_using_command_pos 1 view check" -f -k -a "(__fish_spack_specs)"
# ['-h', '--help'] -> 'help': 0
complete -c spack -n "__fish_spack_using_command view check" -s h -l help -d "show this help message and exit"
